/* Generated By:JJTree&JavaCC: Do not edit this line. JavaParser.java */

package net.sourceforge.pmd.lang.java.ast;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import net.sourceforge.pmd.lang.ast.CharStream;
import net.sourceforge.pmd.lang.ast.TokenMgrError;
import net.sourceforge.pmd.lang.ast.Node;

public class JavaParser/*@bgen(jjtree)*/ implements JavaParserTreeConstants, JavaParserConstants {/*@bgen(jjtree)*/
    protected JJTJavaParserState jjtree = new JJTJavaParserState();
    private int jdkVersion = 0;

    public void setJdkVersion(int jdkVersion) {
        this.jdkVersion = jdkVersion;
    }

    private void throwParseException(String message) {
        int line = -1;
        int col = -1;
        if (jj_lastpos != null) {
            line = jj_lastpos.beginLine;
            col = jj_lastpos.beginColumn;
        }
        throw new ParseException("Line " + line + ", Column " + col + ": " + message);
    }

    private void checkForBadAssertUsage(String in, String usage) {
        if (jdkVersion > 3 && in.equals("assert")) {
            throwParseException("Can't use 'assert' as " + usage + " when running in JDK 1.4 mode!");
        }
    }

    private void checkForBadStaticImportUsage() {
        if (jdkVersion < 5) {
            throwParseException("Can't use static imports when running in JDK 1.4 mode!");
        }
    }

    private void checkForBadAnnotationUsage() {
        if (jdkVersion < 5) {
            throwParseException("Can't use annotations when running in JDK 1.4 mode!");
        }
    }

    private void checkForBadGenericsUsage() {
        if (jdkVersion < 5) {
            throwParseException("Can't use generics unless running in JDK 1.5 mode!");
        }
    }

    private void checkForBadVariableArgumentsUsage() {
        if (jdkVersion < 5) {
            throwParseException("Can't use variable arguments (varargs) when running in JDK 1.4 mode!");
        }
    }

    private void checkForBadJDK15ForLoopSyntaxArgumentsUsage() {
        if (jdkVersion < 5) {
            throwParseException("Can't use JDK 1.5 for loop syntax when running in JDK 1.4 mode!");
        }
    }

    private void checkForBadEnumUsage(String in, String usage) {
        if (jdkVersion >= 5 && in.equals("enum")) {
            throwParseException("Can't use 'enum' as " + usage + " when running in JDK 1.5 mode!");
        }
    }

    private void checkForBadHexFloatingPointLiteral() {
        if (jdkVersion < 5) {
            throwParseException("Can't use hexadecimal floating point literals in pre-JDK 1.5 target");
        }
    }

    private void checkForBadNumericalLiteralslUsage(Token token) {
        if (jdkVersion < 7) {
            if (token.image.contains("_")) {
                throwParseException("Can't use underscores in numerical literals when running in JDK inferior to 1.7 mode!");
            }

            if (token.image.startsWith("0b") || token.image.startsWith("0B")) {
                throwParseException("Can't use binary numerical literals when running in JDK inferior to 1.7 mode!");
            }
        }
    }

    private void checkForBadDiamondUsage() {
        if (jdkVersion < 7) {
            throwParseException("Cannot use the diamond generic notation when running in JDK inferior to 1.7 mode!");
        }
    }

    private void checkForBadTryWithResourcesUsage() {
        if (jdkVersion < 7) {
            throwParseException("Cannot use the try-with-resources notation when running in JDK inferior to 1.7 mode!");
        }
    }

    private void checkForBadMultipleExceptionsCatching() {
        if (jdkVersion < 7) {
            throwParseException("Cannot catch multiple exceptions when running in JDK inferior to 1.7 mode!");
        }
    }

    private void checkForBadLambdaUsage() {
        if (jdkVersion < 8) {
            throwParseException("Cannot use lambda expressions when running in JDK inferior to 1.8 mode!");
        }
    }

    private void checkForBadMethodReferenceUsage() {
        if (jdkVersion < 8) {
            throwParseException("Cannot use method references when running in JDK inferior to 1.8 mode!");
        }
    }

    private void checkForBadDefaultImplementationUsage() {
        if (jdkVersion < 8) {
            throwParseException("Cannot use default implementations in interfaces when running in JDK inferior to 1.8 mode!");
        }
    }

    private void checkForBadIntersectionTypesInCasts() {
        if (jdkVersion < 8) {
            throwParseException("Cannot use intersection types in casts when running in JDK inferior to 1.8 mode!");
        }
    }

    private void checkForBadTypeAnnotations() {
        if (jdkVersion < 8) {
            throwParseException("Cannot use type annotations when running in JDK inferior to 1.8 mode!");
        }
    }

    private void checkforBadExplicitReceiverParameter() {
        if (jdkVersion < 8) {
            throwParseException("Cannot use explicit receiver parameters when running in JDK inferior to 1.8 mode!");
        }
    }

    private void checkForBadAnonymousDiamondUsage() {
        if (jdkVersion < 9) {
            Node node = jjtree.peekNode();
            if (node instanceof ASTConstructorCall) {
                ASTConstructorCall expr = (ASTConstructorCall) node;
                ASTTypeArguments types = expr.getTypeNode().getTypeArguments();
                if (expr.isAnonymousClass() && types != null && types.isDiamond()) {
                    throwParseException("Cannot use '<>' with anonymous inner classes when running in JDK inferior to 9 mode!");
                }
            }
        }
    }

    /**
     * Keeps track whether we are dealing with an interface or not. Needed since the tree is
     * is not fully constructed yet, when we check for private interface methods.
     * The flag is updated, if entering ClassOrInterfaceDeclaration and reset when leaving.
     * The flag is also reset, if entering a anonymous inner class or enums.
     */
    private boolean inInterface = false;

    private void checkForBadPrivateInterfaceMethod(ASTMethodDeclaration node) {
        if (jdkVersion < 9 && inInterface && node.isPrivate()) {
            throwParseException("Cannot use private interface methods when running in JDK inferior to 9 mode!");
        }
    }

    private void checkForBadIdentifier(String image) {
        if (jdkVersion >= 9 && "_".equals(image)) {
            throwParseException("With JDK 9, '_' is a keyword, and may not be used as an identifier!");
        }
    }

    private void checkForBadModuleUsage() {
        if (jdkVersion < 9) {
            throwParseException("Cannot use module declaration when running in JDK inferior to 9 mode!");
        }
    }

    private void checkForBadConciseTryWithResourcesUsage() {
        Node top = jjtree.peekNode();
        if (!(top instanceof ASTFieldAccess || top instanceof ASTVariableReference)) {
            throwParseException("Expected a variable access, but was a " + top.getXPathNodeName());
        }

        if (jdkVersion < 9) {
            throwParseException("Cannot use concise try-with-resources when running in JDK inferior to 9 mode!");
        }
    }

    private void checkForBadTypeIdentifierUsage(String image) {
        if (jdkVersion >= 10 && "var".equals(image)) {
            throwParseException("With JDK 10, 'var' is a restricted local variable type and cannot be used for type declarations!");
        }
    }

    // This is a semantic LOOKAHEAD to determine if we're dealing with an assert
    // Note that this can't be replaced with a syntactic lookahead
    // since "assert" isn't a string literal token
    private boolean isNextTokenAnAssert() {
        if (jdkVersion <= 3) {
            return false;
        }

        return getToken(1).image.equals("assert");
    }

    private boolean isPrecededByComment(Token tok) {
        boolean res = false;
        while (!res && tok.specialToken != null) {
            tok = tok.specialToken;
            res = tok.kind == SINGLE_LINE_COMMENT ||
                tok.kind == FORMAL_COMMENT ||
                tok.kind == MULTI_LINE_COMMENT;
        }
        return res;
    }

    /**
     * Semantic lookahead to check if the next identifier is a
     * specific restricted keyword.
     */
    private boolean isKeyword(String keyword) {
        return getToken(1).kind == IDENTIFIER && getToken(1).image.equals(keyword);
    }

    public Map<Integer, String> getSuppressMap() {
        return token_source.getSuppressMap();
    }

    public void setSuppressMarker(String marker) {
        token_source.setSuppressMarker(marker);
    }

    /**
     * Takes the two nodes at the top of the stack and inject the next-to-last as the first
     * child of the last. Basically it transforms eg [A][B] into [[A]B]. Can be used to e.g.
     * build a left-recursive expression or type subtree from an iterative parsing.
     */
    private void wrapLeft() {
        AbstractJavaNode lastSegment = (AbstractJavaNode) jjtree.popNode();
        Node previousSegment = jjtree.popNode();

        lastSegment.insertChild((AbstractJavaNode) previousSegment, 0);
        if (lastSegment instanceof AbstractLateInitNode) {
            ((AbstractLateInitNode) lastSegment).onInjectFinished();
        }
        jjtree.pushNode(lastSegment);
    }

    private void setLastTokenImage(JavaNode node) {
        node.setImage(getToken(0).getImage());
    }

    private void forceExprContext() {
        Node top = jjtree.peekNode();

        if (top instanceof ASTAmbiguousName) {
            // see doc on the method
            Node replacement = ((ASTAmbiguousName) top).forceExprContext();
            jjtree.popNode();
            jjtree.pushNode(replacement);
        }
    }

    /*****************************************
     * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
     *****************************************/

    /*
     * Program structuring syntax follows.
     */
    final public ASTCompilationUnit CompilationUnit() throws ParseException {
        /*@bgen(jjtree) CompilationUnit */
        ASTCompilationUnit jjtn000 = new ASTCompilationUnit(this, JJTCOMPILATIONUNIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_1(2147483647)) {
                PackageDeclaration();
                label_1:
                while (true) {
                    switch (jj_nt.kind) {
                    case SEMICOLON:
                        ;
                        break;
                    default:
                        jj_la1[0] = jj_gen;
                        break label_1;
                    }
                    EmptyStatement();
                }
            } else {
                ;
            }
            label_2:
            while (true) {
                switch (jj_nt.kind) {
                case IMPORT:
                    ;
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    break label_2;
                }
                ImportDeclaration();
                label_3:
                while (true) {
                    switch (jj_nt.kind) {
                    case SEMICOLON:
                        ;
                        break;
                    default:
                        jj_la1[2] = jj_gen;
                        break label_3;
                    }
                    EmptyStatement();
                }
            }
            label_4:
            while (true) {
                if (jj_2_2(2)) {
                    ;
                } else {
                    break label_4;
                }
                TypeDeclaration();
                label_5:
                while (true) {
                    switch (jj_nt.kind) {
                    case SEMICOLON:
                        ;
                        break;
                    default:
                        jj_la1[3] = jj_gen;
                        break label_5;
                    }
                    EmptyStatement();
                }
            }
            if (isKeyword("open") || isKeyword("module") || getToken(1).kind == AT) {
                ModuleDeclaration();
                label_6:
                while (true) {
                    switch (jj_nt.kind) {
                    case SEMICOLON:
                        ;
                        break;
                    default:
                        jj_la1[4] = jj_gen;
                        break label_6;
                    }
                    EmptyStatement();
                }
            } else {
                ;
            }
            switch (jj_nt.kind) {
            case 126:
                jj_consume_token(126);
                break;
            default:
                jj_la1[5] = jj_gen;
                ;
            }
            switch (jj_nt.kind) {
            case 127:
                jj_consume_token(127);
                break;
            default:
                jj_la1[6] = jj_gen;
                ;
            }
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setComments(token_source.comments);
            {
                if (true) return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public void PackageDeclaration() throws ParseException {
        /*@bgen(jjtree) PackageDeclaration */
        ASTPackageDeclaration jjtn000 = new ASTPackageDeclaration(this, JJTPACKAGEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            label_7:
            while (true) {
                switch (jj_nt.kind) {
                case AT:
                    ;
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    break label_7;
                }
                Annotation();
            }
            jj_consume_token(PACKAGE);
            Name();
            jj_consume_token(SEMICOLON);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ImportDeclaration() throws ParseException {
        /*@bgen(jjtree) ImportDeclaration */
        ASTImportDeclaration jjtn000 = new ASTImportDeclaration(this, JJTIMPORTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(IMPORT);
            switch (jj_nt.kind) {
            case STATIC:
                jj_consume_token(STATIC);
                checkForBadStaticImportUsage();
                jjtn000.setStatic();
                break;
            default:
                jj_la1[8] = jj_gen;
                ;
            }
            Name();
            switch (jj_nt.kind) {
            case DOT:
                jj_consume_token(DOT);
                jj_consume_token(STAR);
                jjtn000.setImportOnDemand();
                break;
            default:
                jj_la1[9] = jj_gen;
                ;
            }
            jj_consume_token(SEMICOLON);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*
     * Modifiers. We match all modifiers in a single rule to reduce the chances of
     * syntax errors for simple modifier mistakes. It will also enable us to give
     * better error messages.
     */
    final public int Modifiers() throws ParseException {
        int modifiers = 0;
        label_8:
        while (true) {
            if (jj_2_3(2)) {
                ;
            } else {
                break label_8;
            }
            switch (jj_nt.kind) {
            case PUBLIC:
                jj_consume_token(PUBLIC);
                modifiers |= AccessNode.PUBLIC;
                break;
            case STATIC:
                jj_consume_token(STATIC);
                modifiers |= AccessNode.STATIC;
                break;
            case PROTECTED:
                jj_consume_token(PROTECTED);
                modifiers |= AccessNode.PROTECTED;
                break;
            case PRIVATE:
                jj_consume_token(PRIVATE);
                modifiers |= AccessNode.PRIVATE;
                break;
            case FINAL:
                jj_consume_token(FINAL);
                modifiers |= AccessNode.FINAL;
                break;
            case ABSTRACT:
                jj_consume_token(ABSTRACT);
                modifiers |= AccessNode.ABSTRACT;
                break;
            case SYNCHRONIZED:
                jj_consume_token(SYNCHRONIZED);
                modifiers |= AccessNode.SYNCHRONIZED;
                break;
            case NATIVE:
                jj_consume_token(NATIVE);
                modifiers |= AccessNode.NATIVE;
                break;
            case TRANSIENT:
                jj_consume_token(TRANSIENT);
                modifiers |= AccessNode.TRANSIENT;
                break;
            case VOLATILE:
                jj_consume_token(VOLATILE);
                modifiers |= AccessNode.VOLATILE;
                break;
            case STRICTFP:
                jj_consume_token(STRICTFP);
                modifiers |= AccessNode.STRICTFP;
                break;
            case _DEFAULT:
                jj_consume_token(_DEFAULT);
                modifiers |= AccessNode.DEFAULT;
                checkForBadDefaultImplementationUsage();
                break;
            case AT:
                Annotation();
                break;
            default:
                jj_la1[10] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) return modifiers;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    /*
     * Declaration syntax follows.
     */
    final public void TypeDeclaration() throws ParseException {
        /*@bgen(jjtree) TypeDeclaration */
        ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(this, JJTTYPEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        int modifiers;
        try {
            modifiers = Modifiers();
            switch (jj_nt.kind) {
            case ABSTRACT:
            case CLASS:
            case FINAL:
            case INTERFACE:
                ClassOrInterfaceDeclaration(modifiers);
                break;
            default:
                jj_la1[11] = jj_gen;
                if (isKeyword("enum")) {
                    EnumDeclaration(modifiers);
                } else {
                    switch (jj_nt.kind) {
                    case AT:
                        AnnotationTypeDeclaration(modifiers);
                        break;
                    default:
                        jj_la1[12] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ClassOrInterfaceDeclaration(int modifiers) throws ParseException {
        /*@bgen(jjtree) ClassOrInterfaceDeclaration */
        ASTClassOrInterfaceDeclaration jjtn000 = new ASTClassOrInterfaceDeclaration(this, JJTCLASSORINTERFACEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t = null;
        jjtn000.setModifiers(modifiers);
        boolean inInterfaceOld = inInterface;
        inInterface = false;
        try {
            switch (jj_nt.kind) {
            case ABSTRACT:
            case CLASS:
            case FINAL:
                switch (jj_nt.kind) {
                case ABSTRACT:
                case FINAL:
                    switch (jj_nt.kind) {
                    case FINAL:
                        jj_consume_token(FINAL);
                        break;
                    case ABSTRACT:
                        jj_consume_token(ABSTRACT);
                        break;
                    default:
                        jj_la1[13] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[14] = jj_gen;
                    ;
                }
                jj_consume_token(CLASS);
                break;
            case INTERFACE:
                jj_consume_token(INTERFACE);
                jjtn000.setInterface();
                inInterface = true;
                break;
            default:
                jj_la1[15] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            t = jj_consume_token(IDENTIFIER);
            checkForBadTypeIdentifierUsage(t.image);
            jjtn000.setImage(t.image);
            switch (jj_nt.kind) {
            case LT:
                TypeParameters();
                break;
            default:
                jj_la1[16] = jj_gen;
                ;
            }
            switch (jj_nt.kind) {
            case EXTENDS:
                ExtendsList();
                break;
            default:
                jj_la1[17] = jj_gen;
                ;
            }
            switch (jj_nt.kind) {
            case IMPLEMENTS:
                ImplementsList();
                break;
            default:
                jj_la1[18] = jj_gen;
                ;
            }
            ClassOrInterfaceBody();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            inInterface = inInterfaceOld;
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ExtendsList() throws ParseException {
        /*@bgen(jjtree) ExtendsList */
        ASTExtendsList jjtn000 = new ASTExtendsList(this, JJTEXTENDSLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        boolean extendsMoreThanOne = false;
        try {
            jj_consume_token(EXTENDS);
            AnnotatedClassOrInterfaceType();
            label_9:
            while (true) {
                switch (jj_nt.kind) {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[19] = jj_gen;
                    break label_9;
                }
                jj_consume_token(COMMA);
                AnnotatedClassOrInterfaceType();
                extendsMoreThanOne = true;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ImplementsList() throws ParseException {
        /*@bgen(jjtree) ImplementsList */
        ASTImplementsList jjtn000 = new ASTImplementsList(this, JJTIMPLEMENTSLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(IMPLEMENTS);
            AnnotatedClassOrInterfaceType();
            label_10:
            while (true) {
                switch (jj_nt.kind) {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    break label_10;
                }
                jj_consume_token(COMMA);
                AnnotatedClassOrInterfaceType();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void EnumDeclaration(int modifiers) throws ParseException {
        /*@bgen(jjtree) EnumDeclaration */
        ASTEnumDeclaration jjtn000 = new ASTEnumDeclaration(this, JJTENUMDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        jjtn000.setModifiers(modifiers);
        try {
            t = jj_consume_token(IDENTIFIER);
            if (!"enum".equals(t.image)) {
                {
                    if (true) throw new ParseException("ERROR: expecting enum");
                }
            }

            if (jdkVersion < 5) {
                {
                    if (true) throw new ParseException("ERROR: Can't use enum as a keyword in pre-JDK 1.5 target");
                }
            }
            t = jj_consume_token(IDENTIFIER);
            checkForBadTypeIdentifierUsage(t.image);
            jjtn000.setImage(t.image);
            switch (jj_nt.kind) {
            case IMPLEMENTS:
                ImplementsList();
                break;
            default:
                jj_la1[21] = jj_gen;
                ;
            }
            EnumBody();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void EnumBody() throws ParseException {
        /*@bgen(jjtree) EnumBody */
        ASTEnumBody jjtn000 = new ASTEnumBody(this, JJTENUMBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        boolean inInterfaceOld = inInterface;
        inInterface = false;
        try {
            jj_consume_token(LBRACE);
            switch (jj_nt.kind) {
            case IDENTIFIER:
            case AT:
                label_11:
                while (true) {
                    switch (jj_nt.kind) {
                    case AT:
                        ;
                        break;
                    default:
                        jj_la1[22] = jj_gen;
                        break label_11;
                    }
                    Annotation();
                }
                EnumConstant();
                label_12:
                while (true) {
                    if (jj_2_4(2)) {
                        ;
                    } else {
                        break label_12;
                    }
                    jj_consume_token(COMMA);
                    label_13:
                    while (true) {
                        switch (jj_nt.kind) {
                        case AT:
                            ;
                            break;
                        default:
                            jj_la1[23] = jj_gen;
                            break label_13;
                        }
                        Annotation();
                    }
                    EnumConstant();
                }
                break;
            default:
                jj_la1[24] = jj_gen;
                ;
            }
            switch (jj_nt.kind) {
            case COMMA:
                jj_consume_token(COMMA);
                break;
            default:
                jj_la1[25] = jj_gen;
                ;
            }
            switch (jj_nt.kind) {
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                label_14:
                while (true) {
                    if (jj_2_5(1)) {
                        ;
                    } else {
                        break label_14;
                    }
                    ClassOrInterfaceBodyDeclaration();
                }
                break;
            default:
                jj_la1[26] = jj_gen;
                ;
            }
            jj_consume_token(RBRACE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            inInterface = inInterfaceOld;
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void EnumConstant() throws ParseException {
        /*@bgen(jjtree) EnumConstant */
        ASTEnumConstant jjtn000 = new ASTEnumConstant(this, JJTENUMCONSTANT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            t = jj_consume_token(IDENTIFIER);
            jjtn000.setImage(t.image);
            switch (jj_nt.kind) {
            case LPAREN:
                Arguments();
                break;
            default:
                jj_la1[27] = jj_gen;
                ;
            }
            switch (jj_nt.kind) {
            case LBRACE:
                ClassOrInterfaceBody();
                break;
            default:
                jj_la1[28] = jj_gen;
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void TypeParameters() throws ParseException {
        /*@bgen(jjtree) TypeParameters */
        ASTTypeParameters jjtn000 = new ASTTypeParameters(this, JJTTYPEPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(LT);
            checkForBadGenericsUsage();
            TypeParameter();
            label_15:
            while (true) {
                switch (jj_nt.kind) {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[29] = jj_gen;
                    break label_15;
                }
                jj_consume_token(COMMA);
                TypeParameter();
            }
            jj_consume_token(GT);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void TypeParameter() throws ParseException {
        /*@bgen(jjtree) TypeParameter */
        ASTTypeParameter jjtn000 = new ASTTypeParameter(this, JJTTYPEPARAMETER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            TypeAnnotationList();
            t = jj_consume_token(IDENTIFIER);
            jjtn000.setImage(t.image);
            switch (jj_nt.kind) {
            case EXTENDS:
                TypeBound();
                break;
            default:
                jj_la1[30] = jj_gen;
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void TypeBound() throws ParseException {
        jj_consume_token(EXTENDS);
        IntersectionType(false);
    }

    final public void ClassOrInterfaceBody() throws ParseException {
        /*@bgen(jjtree) ClassOrInterfaceBody */
        ASTClassOrInterfaceBody jjtn000 = new ASTClassOrInterfaceBody(this, JJTCLASSORINTERFACEBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(LBRACE);
            label_16:
            while (true) {
                if (jj_2_6(1)) {
                    ;
                } else {
                    break label_16;
                }
                ClassOrInterfaceBodyDeclaration();
            }
            jj_consume_token(RBRACE);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ClassOrInterfaceBodyDeclaration() throws ParseException {
        /*@bgen(jjtree) ClassOrInterfaceBodyDeclaration */
        ASTClassOrInterfaceBodyDeclaration jjtn000 = new ASTClassOrInterfaceBodyDeclaration(this, JJTCLASSORINTERFACEBODYDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        int modifiers;
        try {
            if (jj_2_12(2147483647)) {
                Initializer();
            } else if (jj_2_13(1)) {
                modifiers = Modifiers();
                if (jj_2_7(3)) {
                    ClassOrInterfaceDeclaration(modifiers);
                } else if (isKeyword("enum")) {
                    EnumDeclaration(modifiers);
                } else if (jj_2_8(2147483647)) {
                    ConstructorDeclaration(modifiers);
                } else if (jj_2_9(2147483647)) {
                    FieldDeclaration(modifiers);
                } else if (jj_2_10(2)) {
                    MethodDeclaration(modifiers);
                } else if (jj_2_11(2)) {
                    AnnotationTypeDeclaration(modifiers);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            } else {
                switch (jj_nt.kind) {
                case SEMICOLON:
                    jj_consume_token(SEMICOLON);
                    break;
                default:
                    jj_la1[31] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void FieldDeclaration(int modifiers) throws ParseException {
        /*@bgen(jjtree) FieldDeclaration */
        ASTFieldDeclaration jjtn000 = new ASTFieldDeclaration(this, JJTFIELDDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        jjtn000.setModifiers(modifiers);
        try {
            Type();
            VariableDeclarator();
            label_17:
            while (true) {
                switch (jj_nt.kind) {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[32] = jj_gen;
                    break label_17;
                }
                jj_consume_token(COMMA);
                VariableDeclarator();
            }
            jj_consume_token(SEMICOLON);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void VariableDeclarator() throws ParseException {
        /*@bgen(jjtree) VariableDeclarator */
        ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(this, JJTVARIABLEDECLARATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            VariableDeclaratorId();
            switch (jj_nt.kind) {
            case ASSIGN:
                jj_consume_token(ASSIGN);
                VariableInitializer();
                break;
            default:
                jj_la1[33] = jj_gen;
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    // TODO use ArrayTypeDims
    final public void VariableDeclaratorId() throws ParseException {
        /*@bgen(jjtree) VariableDeclaratorId */
        ASTVariableDeclaratorId jjtn000 = new ASTVariableDeclaratorId(this, JJTVARIABLEDECLARATORID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        String image;
        try {
            if (jj_2_14(2)) {
                t = jj_consume_token(IDENTIFIER);
                jj_consume_token(DOT);
                jj_consume_token(THIS);
                checkforBadExplicitReceiverParameter();
                jjtn000.setExplicitReceiverParameter();
                image = t.image + ".this";
            } else {
                switch (jj_nt.kind) {
                case THIS:
                    t = jj_consume_token(THIS);
                    checkforBadExplicitReceiverParameter();
                    jjtn000.setExplicitReceiverParameter();
                    image = t.image;
                    break;
                case IDENTIFIER:
                    t = jj_consume_token(IDENTIFIER);
                    image = t.image;
                    label_18:
                    while (true) {
                        switch (jj_nt.kind) {
                        case LBRACKET:
                            ;
                            break;
                        default:
                            jj_la1[34] = jj_gen;
                            break label_18;
                        }
                        jj_consume_token(LBRACKET);
                        jj_consume_token(RBRACKET);
                        jjtn000.bumpArrayDepth();
                    }
                    break;
                default:
                    jj_la1[35] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            checkForBadAssertUsage(image, "a variable name");
            checkForBadEnumUsage(image, "a variable name");
            checkForBadIdentifier(image);
            jjtn000.setImage(image);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void VariableInitializer() throws ParseException {
        switch (jj_nt.kind) {
        case LBRACE:
            ArrayInitializer();
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case HEX_FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
            Expression();
            break;
        default:
            jj_la1[36] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void ArrayInitializer() throws ParseException {
        /*@bgen(jjtree) ArrayInitializer */
        ASTArrayInitializer jjtn000 = new ASTArrayInitializer(this, JJTARRAYINITIALIZER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(LBRACE);
            switch (jj_nt.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case HEX_FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                VariableInitializer();
                label_19:
                while (true) {
                    if (jj_2_15(2)) {
                        ;
                    } else {
                        break label_19;
                    }
                    jj_consume_token(COMMA);
                    VariableInitializer();
                }
                break;
            default:
                jj_la1[37] = jj_gen;
                ;
            }
            switch (jj_nt.kind) {
            case COMMA:
                jj_consume_token(COMMA);
                break;
            default:
                jj_la1[38] = jj_gen;
                ;
            }
            jj_consume_token(RBRACE);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void MethodDeclaration(int modifiers) throws ParseException {
        /*@bgen(jjtree) MethodDeclaration */
        ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(this, JJTMETHODDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        jjtn000.setModifiers(modifiers);
        {
            checkForBadPrivateInterfaceMethod(jjtn000);
        }
        try {
            switch (jj_nt.kind) {
            case LT:
                TypeParameters();
                break;
            default:
                jj_la1[39] = jj_gen;
                ;
            }
            ResultType();
            MethodDeclarator();
            switch (jj_nt.kind) {
            case THROWS:
                jj_consume_token(THROWS);
                NameList();
                break;
            default:
                jj_la1[40] = jj_gen;
                ;
            }
            switch (jj_nt.kind) {
            case LBRACE:
                Block();
                break;
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            default:
                jj_la1[41] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void MethodDeclarator() throws ParseException {
        /*@bgen(jjtree) MethodDeclarator */
        ASTMethodDeclarator jjtn000 = new ASTMethodDeclarator(this, JJTMETHODDECLARATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            t = jj_consume_token(IDENTIFIER);
            checkForBadAssertUsage(t.image, "a method name");
            checkForBadEnumUsage(t.image, "a method name");
            jjtn000.setImage(t.image);
            FormalParameters();
            label_20:
            while (true) {
                switch (jj_nt.kind) {
                case LBRACKET:
                    ;
                    break;
                default:
                    jj_la1[42] = jj_gen;
                    break label_20;
                }
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void FormalParameters() throws ParseException {
        /*@bgen(jjtree) FormalParameters */
        ASTFormalParameters jjtn000 = new ASTFormalParameters(this, JJTFORMALPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(LPAREN);
            switch (jj_nt.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case IDENTIFIER:
            case AT:
                FormalParameter();
                label_21:
                while (true) {
                    switch (jj_nt.kind) {
                    case COMMA:
                        ;
                        break;
                    default:
                        jj_la1[43] = jj_gen;
                        break label_21;
                    }
                    jj_consume_token(COMMA);
                    FormalParameter();
                }
                break;
            default:
                jj_la1[44] = jj_gen;
                ;
            }
            jj_consume_token(RPAREN);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void FormalParameter() throws ParseException {
        /*@bgen(jjtree) FormalParameter */
        ASTFormalParameter jjtn000 = new ASTFormalParameter(this, JJTFORMALPARAMETER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            label_22:
            while (true) {
                switch (jj_nt.kind) {
                case FINAL:
                case AT:
                    ;
                    break;
                default:
                    jj_la1[45] = jj_gen;
                    break label_22;
                }
                switch (jj_nt.kind) {
                case FINAL:
                    jj_consume_token(FINAL);
                    jjtn000.setFinal(true);
                    break;
                case AT:
                    Annotation();
                    break;
                default:
                    jj_la1[46] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            Type();
            label_23:
            while (true) {
                switch (jj_nt.kind) {
                case BIT_OR:
                    ;
                    break;
                default:
                    jj_la1[47] = jj_gen;
                    break label_23;
                }
                jj_consume_token(BIT_OR);
                checkForBadMultipleExceptionsCatching();
                Type();
            }
            switch (jj_nt.kind) {
            case ELLIPSIS:
                jj_consume_token(ELLIPSIS);
                checkForBadVariableArgumentsUsage();
                jjtn000.setVarargs();
                break;
            default:
                jj_la1[48] = jj_gen;
                ;
            }
            VariableDeclaratorId();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ConstructorDeclaration(int modifiers) throws ParseException {
        /*@bgen(jjtree) ConstructorDeclaration */
        ASTConstructorDeclaration jjtn000 = new ASTConstructorDeclaration(this, JJTCONSTRUCTORDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        jjtn000.setModifiers(modifiers);
        Token t;
        try {
            switch (jj_nt.kind) {
            case LT:
                TypeParameters();
                break;
            default:
                jj_la1[49] = jj_gen;
                ;
            }
            jj_consume_token(IDENTIFIER);
            jjtn000.setImage(getToken(0).getImage());
            FormalParameters();
            switch (jj_nt.kind) {
            case THROWS:
                jj_consume_token(THROWS);
                NameList();
                break;
            default:
                jj_la1[50] = jj_gen;
                ;
            }
            jj_consume_token(LBRACE);
            if (jj_2_16(2147483647)) {
                ExplicitConstructorInvocation();
            } else {
                ;
            }
            label_24:
            while (true) {
                if (jj_2_17(1)) {
                    ;
                } else {
                    break label_24;
                }
                BlockStatement();
            }
            t = jj_consume_token(RBRACE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            if (isPrecededByComment(t)) {
                jjtn000.setContainsComment();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ExplicitConstructorInvocation() throws ParseException {
        /*@bgen(jjtree) ExplicitConstructorInvocation */
        ASTExplicitConstructorInvocation jjtn000 = new ASTExplicitConstructorInvocation(this, JJTEXPLICITCONSTRUCTORINVOCATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_19(2147483647)) {
                jj_consume_token(THIS);
                jjtn000.setIsThis();
                Arguments();
                jj_consume_token(SEMICOLON);
            } else if (jj_2_20(2147483647)) {
                TypeArguments();
                jj_consume_token(THIS);
                jjtn000.setIsThis();
                Arguments();
                jj_consume_token(SEMICOLON);
            } else {
                switch (jj_nt.kind) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case HEX_FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case LT:
                    if (jj_2_18(2147483647)) {
                        PrimaryExpression();
                        jj_consume_token(DOT);
                    } else {
                        ;
                    }
                    switch (jj_nt.kind) {
                    case LT:
                        TypeArguments();
                        break;
                    default:
                        jj_la1[51] = jj_gen;
                        ;
                    }
                    jj_consume_token(SUPER);
                    jjtn000.setIsSuper();
                    Arguments();
                    jj_consume_token(SEMICOLON);
                    break;
                default:
                    jj_la1[52] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Initializer() throws ParseException {
        /*@bgen(jjtree) Initializer */
        ASTInitializer jjtn000 = new ASTInitializer(this, JJTINITIALIZER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch (jj_nt.kind) {
            case STATIC:
                jj_consume_token(STATIC);
                jjtn000.setStatic();
                break;
            default:
                jj_la1[53] = jj_gen;
                ;
            }
            Block();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /* JLS: https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.3

ReferenceType:
    ClassOrInterfaceType
    TypeVariable
    ArrayType
ClassOrInterfaceType:
    ClassType
    InterfaceType
ClassType:
    {Annotation} Identifier [TypeArguments]
    ClassOrInterfaceType . {Annotation} Identifier [TypeArguments]
InterfaceType:
    ClassType
TypeVariable:
    {Annotation} Identifier
ArrayType:
    PrimitiveType Dims
    ClassOrInterfaceType Dims
    TypeVariable Dims
Dims:
    {Annotation} [ ] {{Annotation} [ ]}

*/
    final public void IntersectionType(boolean inCast) throws ParseException {
        /*@bgen(jjtree) #IntersectionType(> 1) */
        ASTIntersectionType jjtn000 = new ASTIntersectionType(this, JJTINTERSECTIONTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            AnnotatedType();
            label_25:
            while (true) {
                switch (jj_nt.kind) {
                case BIT_AND:
                    ;
                    break;
                default:
                    jj_la1[54] = jj_gen;
                    break label_25;
                }
                jj_consume_token(BIT_AND);
                if (inCast) checkForBadIntersectionTypesInCasts();
                ClassOrInterfaceType();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AnnotationList() throws ParseException {
        label_26:
        while (true) {
            switch (jj_nt.kind) {
            case AT:
                ;
                break;
            default:
                jj_la1[55] = jj_gen;
                break label_26;
            }
            Annotation();
        }
    }

    final public void TypeAnnotationList() throws ParseException {
        label_27:
        while (true) {
            switch (jj_nt.kind) {
            case AT:
                ;
                break;
            default:
                jj_la1[56] = jj_gen;
                break label_27;
            }
            TypeAnnotation();
        }
    }

    final public void AnnotatedType() throws ParseException {
        /*@bgen(jjtree) #AnnotatedType(> 1) */
        ASTAnnotatedType jjtn000 = new ASTAnnotatedType(this, JJTANNOTATEDTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            TypeAnnotationList();
            Type();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AnnotatedRefType() throws ParseException {
        /*@bgen(jjtree) #AnnotatedType(> 1) */
        ASTAnnotatedType jjtn000 = new ASTAnnotatedType(this, JJTANNOTATEDTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            TypeAnnotationList();
            ReferenceType();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AnnotatedClassOrInterfaceType() throws ParseException {
        /*@bgen(jjtree) #AnnotatedType(> 1) */
        ASTAnnotatedType jjtn000 = new ASTAnnotatedType(this, JJTANNOTATEDTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            TypeAnnotationList();
            ClassOrInterfaceType();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*
     * Type, name and expression syntax follows.
     * Type is the same as "UnannType" in JLS
     *
     * See https://docs.oracle.com/javase/specs/jls/se10/html/jls-8.html#jls-UnannType
     */
    final public void Type() throws ParseException {
        Token t;
        if (jj_2_21(2147483647)) {
            ReferenceType();
        } else {
            switch (jj_nt.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                PrimitiveType();
                break;
            default:
                jj_la1[57] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    final public void Dims() throws ParseException {
        /*@bgen(jjtree) ArrayTypeDims */
        ASTArrayTypeDims jjtn000 = new ASTArrayTypeDims(this, JJTARRAYTYPEDIMS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            label_28:
            while (true) {
                ArrayTypeDim();
                switch (jj_nt.kind) {
                case LBRACKET:
                case AT:
                    ;
                    break;
                default:
                    jj_la1[58] = jj_gen;
                    break label_28;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ArrayTypeDim() throws ParseException {
        /*@bgen(jjtree) ArrayTypeDim */
        ASTArrayTypeDim jjtn000 = new ASTArrayTypeDim(this, JJTARRAYTYPEDIM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            label_29:
            while (true) {
                switch (jj_nt.kind) {
                case AT:
                    ;
                    break;
                default:
                    jj_la1[59] = jj_gen;
                    break label_29;
                }
                TypeAnnotation();
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ReferenceType() throws ParseException {
        switch (jj_nt.kind) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
            ASTArrayType jjtn001 = new ASTArrayType(this, JJTARRAYTYPE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try {
                PrimitiveType();
                Dims();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte001;
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte001;
                    }
                }
                {
                    if (true) throw (Error) jjte001;
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            break;
        case IDENTIFIER:
            ASTArrayType jjtn002 = new ASTArrayType(this, JJTARRAYTYPE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try {
                ClassOrInterfaceType();
                if (jj_2_22(2)) {
                    Dims();
                } else {
                    ;
                }
            } catch (Throwable jjte002) {
                if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte002;
                    }
                }
                if (jjte002 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte002;
                    }
                }
                {
                    if (true) throw (Error) jjte002;
                }
            } finally {
                if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
            break;
        default:
            jj_la1[60] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /**
     * Parses a ClassOrInterfaceType. The production itself is #void,
     * but the node exists (declared inline within the production).
     */
    final public void ClassOrInterfaceType() throws ParseException {
        ASTClassOrInterfaceType jjtn001 = new ASTClassOrInterfaceType(this, JJTCLASSORINTERFACETYPE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
        try {
            AmbiguousName();
            switch (jj_nt.kind) {
            case LT:
                TypeArguments();
                break;
            default:
                jj_la1[61] = jj_gen;
                ;
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte001;
                }
            }
            {
                if (true) throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                jjtn001.jjtSetLastToken(getToken(0));
            }
        }
        // At this point the first ClassOrInterfaceType may be on top of the stack,
        // but its image is not set. If it is on the stack we need to shrink the bounds
        // of the ambiguous name, or delete it.
        Node first = jjtree.peekNode();
        if (!(first instanceof ASTAmbiguousName)) {
            // then we saw type arguments, so the last segment is definitely a type name
            ASTAmbiguousName name = (ASTAmbiguousName) first.jjtGetChild(0);
            name.shrinkOrDeleteInParentSetImage();
        }
        label_30:
        while (true) {
            if (jj_2_23(2)) {
                ;
            } else {
                break label_30;
            }
            ASTClassOrInterfaceType jjtn002 = new ASTClassOrInterfaceType(this, JJTCLASSORINTERFACETYPE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try {
                jj_consume_token(DOT);
                label_31:
                while (true) {
                    switch (jj_nt.kind) {
                    case AT:
                        ;
                        break;
                    default:
                        jj_la1[62] = jj_gen;
                        break label_31;
                    }
                    TypeAnnotation();
                }
                jj_consume_token(IDENTIFIER);
                jjtn002.setImage(getToken(0).getImage());
                jjtree.extendLeft(1);
                if (jj_2_24(2147483647)) {
                    TypeArguments();
                } else {
                    ;
                }
            } catch (Throwable jjte002) {
                if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte002;
                    }
                }
                if (jjte002 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte002;
                    }
                }
                {
                    if (true) throw (Error) jjte002;
                }
            } finally {
                if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
        }
        Node top = jjtree.peekNode();
        if (top instanceof ASTAmbiguousName) {
            Node replacement = ((ASTAmbiguousName) top).forceTypeContext();
            jjtree.popNode();
            jjtree.pushNode(replacement);
        }
    }

    final public void TypeArguments() throws ParseException {
        /*@bgen(jjtree) TypeArguments */
        ASTTypeArguments jjtn000 = new ASTTypeArguments(this, JJTTYPEARGUMENTS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_25(2)) {
                jj_consume_token(LT);
                checkForBadGenericsUsage();
                TypeArgumentImpl();
                label_32:
                while (true) {
                    switch (jj_nt.kind) {
                    case COMMA:
                        ;
                        break;
                    default:
                        jj_la1[63] = jj_gen;
                        break label_32;
                    }
                    jj_consume_token(COMMA);
                    TypeArgumentImpl();
                }
                jj_consume_token(GT);
            } else {
                switch (jj_nt.kind) {
                case LT:
                    jj_consume_token(LT);
                    checkForBadDiamondUsage();
                    jj_consume_token(GT);
                    break;
                default:
                    jj_la1[64] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void TypeArgumentImpl() throws ParseException {
        /*@bgen(jjtree) #AnnotatedType(> 1) */
        ASTAnnotatedType jjtn000 = new ASTAnnotatedType(this, JJTANNOTATEDTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            TypeAnnotationList();
            switch (jj_nt.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case IDENTIFIER:
                ReferenceType();
                break;
            case HOOK:
                WildcardType();
                break;
            default:
                jj_la1[65] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    // TODO remove me, kept for transition
    final public void TypeArgument() throws ParseException {
        /*@bgen(jjtree) TypeArgument */
        ASTTypeArgument jjtn000 = new ASTTypeArgument(this, JJTTYPEARGUMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            label_33:
            while (true) {
                switch (jj_nt.kind) {
                case AT:
                    ;
                    break;
                default:
                    jj_la1[66] = jj_gen;
                    break label_33;
                }
                TypeAnnotation();
            }
            switch (jj_nt.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case IDENTIFIER:
                ReferenceType();
                break;
            case HOOK:
                WildcardType();
                break;
            default:
                jj_la1[67] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void WildcardType() throws ParseException {
        /*@bgen(jjtree) WildcardType */
        ASTWildcardType jjtn000 = new ASTWildcardType(this, JJTWILDCARDTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(HOOK);
            switch (jj_nt.kind) {
            case EXTENDS:
            case SUPER:
                switch (jj_nt.kind) {
                case EXTENDS:
                    jj_consume_token(EXTENDS);
                    jjtn000.setUpperBound(true);
                    break;
                case SUPER:
                    jj_consume_token(SUPER);
                    break;
                default:
                    jj_la1[68] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                AnnotatedRefType();
                break;
            default:
                jj_la1[69] = jj_gen;
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    // TODO remove me
    final public void WildcardBounds() throws ParseException {
        /*@bgen(jjtree) WildcardBounds */
        ASTWildcardBounds jjtn000 = new ASTWildcardBounds(this, JJTWILDCARDBOUNDS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch (jj_nt.kind) {
            case EXTENDS:
                jj_consume_token(EXTENDS);
                break;
            case SUPER:
                jj_consume_token(SUPER);
                break;
            default:
                jj_la1[70] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            AnnotatedRefType();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /* JLS https://docs.oracle.com/javase/specs/jls/se10/html/jls-4.html#jls-PrimitiveType

PrimitiveType:
    {Annotation} NumericType
    {Annotation} boolean
NumericType:
    IntegralType
    FloatingPointType
IntegralType:
    (one of)
    byte short int long char
FloatingPointType:
    (one of)
    float double
*/
    final public void PrimitiveType() throws ParseException {
        /*@bgen(jjtree) PrimitiveType */
        ASTPrimitiveType jjtn000 = new ASTPrimitiveType(this, JJTPRIMITIVETYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch (jj_nt.kind) {
            case BOOLEAN:
                jj_consume_token(BOOLEAN);
                break;
            case CHAR:
                jj_consume_token(CHAR);
                break;
            case BYTE:
                jj_consume_token(BYTE);
                break;
            case SHORT:
                jj_consume_token(SHORT);
                break;
            case INT:
                jj_consume_token(INT);
                break;
            case LONG:
                jj_consume_token(LONG);
                break;
            case FLOAT:
                jj_consume_token(FLOAT);
                break;
            case DOUBLE:
                jj_consume_token(DOUBLE);
                break;
            default:
                jj_la1[71] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setImage(getToken(0).getImage());
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ResultType() throws ParseException {
        /*@bgen(jjtree) ResultType */
        ASTResultType jjtn000 = new ASTResultType(this, JJTRESULTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch (jj_nt.kind) {
            case VOID:
                jj_consume_token(VOID);
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case IDENTIFIER:
            case AT:
                AnnotatedType();
                break;
            default:
                jj_la1[72] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void TypeOrVoid() throws ParseException {
        switch (jj_nt.kind) {
        case VOID:
            jj_consume_token(VOID);
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
            Type();
            break;
        default:
            jj_la1[73] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    // TODO rename to ThrowsClause
    final public void NameList() throws ParseException {
        /*@bgen(jjtree) NameList */
        ASTNameList jjtn000 = new ASTNameList(this, JJTNAMELIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            label_34:
            while (true) {
                switch (jj_nt.kind) {
                case AT:
                    ;
                    break;
                default:
                    jj_la1[74] = jj_gen;
                    break label_34;
                }
                TypeAnnotation();
            }
            Name();
            label_35:
            while (true) {
                switch (jj_nt.kind) {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[75] = jj_gen;
                    break label_35;
                }
                jj_consume_token(COMMA);
                label_36:
                while (true) {
                    switch (jj_nt.kind) {
                    case AT:
                        ;
                        break;
                    default:
                        jj_la1[76] = jj_gen;
                        break label_36;
                    }
                    TypeAnnotation();
                }
                Name();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*
     * Expression syntax follows.
     */
    final public void Expression() throws ParseException {
        /*@bgen(jjtree) #AssignmentExpression(> 1) */
        ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(this, JJTASSIGNMENTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        AssignmentOp op = null;
        try {
            ConditionalExpression();
            if (jj_2_26(2)) {
                op = AssignmentOperator();
                jjtn000.setOp(op);
                Expression();
            } else {
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public AssignmentOp AssignmentOperator() throws ParseException {
        switch (jj_nt.kind) {
        case ASSIGN:
            jj_consume_token(ASSIGN);
            break;
        case STARASSIGN:
            jj_consume_token(STARASSIGN);
            break;
        case SLASHASSIGN:
            jj_consume_token(SLASHASSIGN);
            break;
        case REMASSIGN:
            jj_consume_token(REMASSIGN);
            break;
        case PLUSASSIGN:
            jj_consume_token(PLUSASSIGN);
            break;
        case MINUSASSIGN:
            jj_consume_token(MINUSASSIGN);
            break;
        case LSHIFTASSIGN:
            jj_consume_token(LSHIFTASSIGN);
            break;
        case RSIGNEDSHIFTASSIGN:
            jj_consume_token(RSIGNEDSHIFTASSIGN);
            break;
        case RUNSIGNEDSHIFTASSIGN:
            jj_consume_token(RUNSIGNEDSHIFTASSIGN);
            break;
        case ANDASSIGN:
            jj_consume_token(ANDASSIGN);
            break;
        case XORASSIGN:
            jj_consume_token(XORASSIGN);
            break;
        case ORASSIGN:
            jj_consume_token(ORASSIGN);
            break;
        default:
            jj_la1[77] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if (true) return AssignmentOp.fromImage(getToken(0).getImage());
        }
        throw new RuntimeException("Missing return statement in function");
    }

    // TODO Setting isTernary is unnecessary, since the node is only pushed on the stack if there is at least one child,
// ie if it's a ternary
    final public void ConditionalExpression() throws ParseException {
        /*@bgen(jjtree) #ConditionalExpression(> 1) */
        ASTConditionalExpression jjtn000 = new ASTConditionalExpression(this, JJTCONDITIONALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ConditionalOrExpression();
            if (jj_2_27(2)) {
                jj_consume_token(HOOK);
                Expression();
                jj_consume_token(COLON);
                ConditionalExpression();
            } else {
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ConditionalOrExpression() throws ParseException {
        /*@bgen(jjtree) #ConditionalOrExpression(> 1) */
        ASTConditionalOrExpression jjtn000 = new ASTConditionalOrExpression(this, JJTCONDITIONALOREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ConditionalAndExpression();
            label_37:
            while (true) {
                if (jj_2_28(2)) {
                    ;
                } else {
                    break label_37;
                }
                jj_consume_token(SC_OR);
                ConditionalAndExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ConditionalAndExpression() throws ParseException {
        /*@bgen(jjtree) #ConditionalAndExpression(> 1) */
        ASTConditionalAndExpression jjtn000 = new ASTConditionalAndExpression(this, JJTCONDITIONALANDEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            InclusiveOrExpression();
            label_38:
            while (true) {
                if (jj_2_29(2)) {
                    ;
                } else {
                    break label_38;
                }
                jj_consume_token(SC_AND);
                InclusiveOrExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void InclusiveOrExpression() throws ParseException {
        /*@bgen(jjtree) #InclusiveOrExpression(> 1) */
        ASTInclusiveOrExpression jjtn000 = new ASTInclusiveOrExpression(this, JJTINCLUSIVEOREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ExclusiveOrExpression();
            label_39:
            while (true) {
                if (jj_2_30(2)) {
                    ;
                } else {
                    break label_39;
                }
                jj_consume_token(BIT_OR);
                ExclusiveOrExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ExclusiveOrExpression() throws ParseException {
        /*@bgen(jjtree) #ExclusiveOrExpression(> 1) */
        ASTExclusiveOrExpression jjtn000 = new ASTExclusiveOrExpression(this, JJTEXCLUSIVEOREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            AndExpression();
            label_40:
            while (true) {
                if (jj_2_31(2)) {
                    ;
                } else {
                    break label_40;
                }
                jj_consume_token(XOR);
                AndExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AndExpression() throws ParseException {
        /*@bgen(jjtree) #AndExpression(> 1) */
        ASTAndExpression jjtn000 = new ASTAndExpression(this, JJTANDEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            EqualityExpression();
            label_41:
            while (true) {
                if (jj_2_32(2)) {
                    ;
                } else {
                    break label_41;
                }
                jj_consume_token(BIT_AND);
                EqualityExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void EqualityExpression() throws ParseException {
        /*@bgen(jjtree) #EqualityExpression(> 1) */
        ASTEqualityExpression jjtn000 = new ASTEqualityExpression(this, JJTEQUALITYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            InstanceOfExpression();
            label_42:
            while (true) {
                if (jj_2_33(2)) {
                    ;
                } else {
                    break label_42;
                }
                switch (jj_nt.kind) {
                case EQ:
                    jj_consume_token(EQ);
                    jjtn000.setImage("==");
                    break;
                case NE:
                    jj_consume_token(NE);
                    jjtn000.setImage("!=");
                    break;
                default:
                    jj_la1[78] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                InstanceOfExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void InstanceOfExpression() throws ParseException {
        /*@bgen(jjtree) #InstanceOfExpression(> 1) */
        ASTInstanceOfExpression jjtn000 = new ASTInstanceOfExpression(this, JJTINSTANCEOFEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            RelationalExpression();
            if (jj_2_34(2)) {
                jj_consume_token(INSTANCEOF);
                Type();
            } else {
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void RelationalExpression() throws ParseException {
        /*@bgen(jjtree) #RelationalExpression(> 1) */
        ASTRelationalExpression jjtn000 = new ASTRelationalExpression(this, JJTRELATIONALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ShiftExpression();
            label_43:
            while (true) {
                if (jj_2_35(2)) {
                    ;
                } else {
                    break label_43;
                }
                switch (jj_nt.kind) {
                case LT:
                    jj_consume_token(LT);
                    jjtn000.setImage("<");
                    break;
                case GT:
                    jj_consume_token(GT);
                    jjtn000.setImage(">");
                    break;
                case LE:
                    jj_consume_token(LE);
                    jjtn000.setImage("<=");
                    break;
                case GE:
                    jj_consume_token(GE);
                    jjtn000.setImage(">=");
                    break;
                default:
                    jj_la1[79] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                ShiftExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ShiftExpression() throws ParseException {
        /*@bgen(jjtree) #ShiftExpression(> 1) */
        ASTShiftExpression jjtn000 = new ASTShiftExpression(this, JJTSHIFTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            AdditiveExpression();
            label_44:
            while (true) {
                if (jj_2_36(2)) {
                    ;
                } else {
                    break label_44;
                }
                switch (jj_nt.kind) {
                case LSHIFT:
                    jj_consume_token(LSHIFT);
                    jjtn000.setImage("<<");
                    break;
                default:
                    jj_la1[80] = jj_gen;
                    if (jj_2_37(1)) {
                        RSIGNEDSHIFT();
                        jjtn000.setImage(">>");
                    } else if (jj_2_38(1)) {
                        RUNSIGNEDSHIFT();
                        jjtn000.setImage(">>>");
                    } else {
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                AdditiveExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AdditiveExpression() throws ParseException {
        /*@bgen(jjtree) #AdditiveExpression(> 1) */
        ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(this, JJTADDITIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            MultiplicativeExpression();
            label_45:
            while (true) {
                if (jj_2_39(2)) {
                    ;
                } else {
                    break label_45;
                }
                switch (jj_nt.kind) {
                case PLUS:
                    jj_consume_token(PLUS);
                    jjtn000.setImage("+");
                    break;
                case MINUS:
                    jj_consume_token(MINUS);
                    jjtn000.setImage("-");
                    break;
                default:
                    jj_la1[81] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                MultiplicativeExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void MultiplicativeExpression() throws ParseException {
        /*@bgen(jjtree) #MultiplicativeExpression(> 1) */
        ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(this, JJTMULTIPLICATIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            UnaryExpression();
            label_46:
            while (true) {
                if (jj_2_40(2)) {
                    ;
                } else {
                    break label_46;
                }
                switch (jj_nt.kind) {
                case STAR:
                    jj_consume_token(STAR);
                    jjtn000.setImage("*");
                    break;
                case SLASH:
                    jj_consume_token(SLASH);
                    jjtn000.setImage("/");
                    break;
                case REM:
                    jj_consume_token(REM);
                    jjtn000.setImage("%");
                    break;
                default:
                    jj_la1[82] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                UnaryExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void UnaryExpression() throws ParseException {
        /*@bgen(jjtree) #UnaryExpression( ( jjtn000 . getImage ( ) != null )) */
        ASTUnaryExpression jjtn000 = new ASTUnaryExpression(this, JJTUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch (jj_nt.kind) {
            case PLUS:
            case MINUS:
                switch (jj_nt.kind) {
                case PLUS:
                    jj_consume_token(PLUS);
                    jjtn000.setImage("+");
                    break;
                case MINUS:
                    jj_consume_token(MINUS);
                    jjtn000.setImage("-");
                    break;
                default:
                    jj_la1[83] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                UnaryExpression();
                break;
            case INCR:
                PreIncrementExpression();
                break;
            case DECR:
                PreDecrementExpression();
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case HEX_FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
                UnaryExpressionNotPlusMinus();
                break;
            default:
                jj_la1[84] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, (jjtn000.getImage() != null));
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void PreIncrementExpression() throws ParseException {
        /*@bgen(jjtree) PreIncrementExpression */
        ASTPreIncrementExpression jjtn000 = new ASTPreIncrementExpression(this, JJTPREINCREMENTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(INCR);
            PrimaryExpression();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void PreDecrementExpression() throws ParseException {
        /*@bgen(jjtree) PreDecrementExpression */
        ASTPreDecrementExpression jjtn000 = new ASTPreDecrementExpression(this, JJTPREDECREMENTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(DECR);
            PrimaryExpression();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void UnaryExpressionNotPlusMinus() throws ParseException {
        /*@bgen(jjtree) #UnaryExpression( ( jjtn000 . getImage ( ) != null )) */
        ASTUnaryExpression jjtn000 = new ASTUnaryExpression(this, JJTUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch (jj_nt.kind) {
            case BANG:
            case TILDE:
                switch (jj_nt.kind) {
                case TILDE:
                    jj_consume_token(TILDE);
                    jjtn000.setImage("~");
                    break;
                case BANG:
                    jj_consume_token(BANG);
                    jjtn000.setImage("!");
                    break;
                default:
                    jj_la1[85] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                UnaryExpression();
                break;
            default:
                jj_la1[86] = jj_gen;
                if (jj_2_41(2147483647)) {
                    CastExpression();
                } else if (jj_2_42(2147483647)) {
                    CastExpression();
                } else {
                    switch (jj_nt.kind) {
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FALSE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case NEW:
                    case NULL:
                    case SHORT:
                    case SUPER:
                    case THIS:
                    case TRUE:
                    case VOID:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case HEX_FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case IDENTIFIER:
                    case LPAREN:
                        PostfixExpression();
                        break;
                    default:
                        jj_la1[87] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, (jjtn000.getImage() != null));
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void PostfixExpression() throws ParseException {
        /*@bgen(jjtree) #PostfixExpression( ( jjtn000 . getImage ( ) != null )) */
        ASTPostfixExpression jjtn000 = new ASTPostfixExpression(this, JJTPOSTFIXEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            PrimaryExpression();
            switch (jj_nt.kind) {
            case INCR:
            case DECR:
                switch (jj_nt.kind) {
                case INCR:
                    jj_consume_token(INCR);
                    jjtn000.setImage("++");
                    break;
                case DECR:
                    jj_consume_token(DECR);
                    jjtn000.setImage("--");
                    break;
                default:
                    jj_la1[88] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                break;
            default:
                jj_la1[89] = jj_gen;
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, (jjtn000.getImage() != null));
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void CastExpression() throws ParseException {
        /*@bgen(jjtree) CastExpression */
        ASTCastExpression jjtn000 = new ASTCastExpression(this, JJTCASTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_43(2147483647)) {
                jj_consume_token(LPAREN);
                AnnotatedType();
                jj_consume_token(RPAREN);
                UnaryExpression();
            } else {
                switch (jj_nt.kind) {
                case LPAREN:
                    jj_consume_token(LPAREN);
                    IntersectionType(true);
                    jj_consume_token(RPAREN);
                    UnaryExpressionNotPlusMinus();
                    break;
                default:
                    jj_la1[90] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /**
     * A primary expression. This includes call chains, etc.
     *
     * A PrimaryPrefix corresponds to an unqualified primary expression,
     * e.g "new Foo()". Then, if any, suffixes of the form e.g. ".method()",
     * ".field" or "::ref" are added, each time enclosing the previous node.
     *
     * The resulting subtree looks left-recursive, but the parsing is iterative.
     */
    final public void PrimaryExpression() throws ParseException {
        PrimaryPrefix();
        label_47:
        while (true) {
            if (jj_2_44(2)) {
                ;
            } else {
                break label_47;
            }
            PrimarySuffix();
        }
        forceExprContext();
    }

    /**
     * A selector like a
     */
    final public void MemberSelector() throws ParseException {
        if (jj_2_45(2)) {
            ASTMethodCall jjtn001 = new ASTMethodCall(this, JJTMETHODCALL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try {
                jj_consume_token(DOT);
                jjtree.extendLeft();
                TypeArguments();
                jj_consume_token(IDENTIFIER);
                setLastTokenImage(jjtn001);
                ArgumentsList();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte001;
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte001;
                    }
                }
                {
                    if (true) throw (Error) jjte001;
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
        } else if (jj_2_46(3)) {
            ASTMethodCall jjtn002 = new ASTMethodCall(this, JJTMETHODCALL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try {
                jj_consume_token(DOT);
                jjtree.extendLeft();
                jj_consume_token(IDENTIFIER);
                setLastTokenImage(jjtn002);
                ArgumentsList();
            } catch (Throwable jjte002) {
                if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte002;
                    }
                }
                if (jjte002 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte002;
                    }
                }
                {
                    if (true) throw (Error) jjte002;
                }
            } finally {
                if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
        } else {
            switch (jj_nt.kind) {
            case DOT:
                ASTFieldAccess jjtn003 = new ASTFieldAccess(this, JJTFIELDACCESS);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtn003.jjtSetFirstToken(getToken(1));
                try {
                    jj_consume_token(DOT);
                    jjtree.extendLeft();
                    jj_consume_token(IDENTIFIER);
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    jjtn003.jjtSetLastToken(getToken(0));
                    setLastTokenImage(jjtn003);
                } finally {
                    if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtn003.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            default:
                jj_la1[91] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    final public void MethodReference() throws ParseException {
        /*@bgen(jjtree) MethodReference */
        ASTMethodReference jjtn000 = new ASTMethodReference(this, JJTMETHODREFERENCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        checkForBadMethodReferenceUsage();
        try {
            jj_consume_token(METHOD_REF);
            jjtree.extendLeft();
            switch (jj_nt.kind) {
            case LT:
                TypeArguments();
                break;
            default:
                jj_la1[92] = jj_gen;
                ;
            }
            switch (jj_nt.kind) {
            case NEW:
                jj_consume_token(NEW);
                break;
            case IDENTIFIER:
                jj_consume_token(IDENTIFIER);
                break;
            default:
                jj_la1[93] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            setLastTokenImage(jjtn000);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*
  Expressions that may be present at the start of a primary expression.

  TODO some lookaheads can be simplified if we're ok with loosing some strictness

 */
    final public void PrimaryPrefix() throws ParseException {
        Token t;
        switch (jj_nt.kind) {
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case HEX_FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
            Literal();
            break;
        case THIS:
            ASTThisExpression jjtn001 = new ASTThisExpression(this, JJTTHISEXPRESSION);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try {
                jj_consume_token(THIS);
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            break;
        case SUPER:
            ASTSuperExpression jjtn002 = new ASTSuperExpression(this, JJTSUPEREXPRESSION);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try {
                jj_consume_token(SUPER);
            } finally {
                if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
            break;
        default:
            jj_la1[94] = jj_gen;
            if (jj_2_47(2147483647)) {
                LambdaExpression();
            } else if (jj_2_48(2147483647)) {
                LambdaExpression();
            } else if (jj_2_49(2147483647)) {
                LambdaExpression();
            } else {
                switch (jj_nt.kind) {
                case LPAREN:
                    ASTParenthesizedExpression jjtn003 = new ASTParenthesizedExpression(this, JJTPARENTHESIZEDEXPRESSION);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtn003.jjtSetFirstToken(getToken(1));
                    try {
                        jj_consume_token(LPAREN);
                        Expression();
                        jj_consume_token(RPAREN);
                    } catch (Throwable jjte003) {
                        if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte003 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte003;
                            }
                        }
                        if (jjte003 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte003;
                            }
                        }
                        {
                            if (true) throw (Error) jjte003;
                        }
                    } finally {
                        if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                            jjtn003.jjtSetLastToken(getToken(0));
                        }
                    }
                    break;
                case NEW:
                    UnqualifiedAllocationExpr();
                    break;
                default:
                    jj_la1[95] = jj_gen;
                    if (jj_2_50(2147483647)) {
                        ASTClassLiteral jjtn004 = new ASTClassLiteral(this, JJTCLASSLITERAL);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                        jjtn004.jjtSetFirstToken(getToken(1));
                        try {
                            TypeOrVoid();
                            jj_consume_token(DOT);
                            jj_consume_token(CLASS);
                        } catch (Throwable jjte004) {
                            if (jjtc004) {
                                jjtree.clearNodeScope(jjtn004);
                                jjtc004 = false;
                            } else {
                                jjtree.popNode();
                            }
                            if (jjte004 instanceof RuntimeException) {
                                {
                                    if (true) throw (RuntimeException) jjte004;
                                }
                            }
                            if (jjte004 instanceof ParseException) {
                                {
                                    if (true) throw (ParseException) jjte004;
                                }
                            }
                            {
                                if (true) throw (Error) jjte004;
                            }
                        } finally {
                            if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004, true);
                                jjtn004.jjtSetLastToken(getToken(0));
                            }
                        }
                    } else if (jj_2_51(2147483647)) {
                        ReferenceType();
                    } else if (jj_2_52(2147483647)) {
                        AmbiguousName();
                    } else if (jj_2_53(2147483647)) {
                        ReferenceType();
                    } else {
                        switch (jj_nt.kind) {
                        case IDENTIFIER:
                            AmbiguousName();
                            break;
                        default:
                            jj_la1[96] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                }
            }
        }
    }

    /*
     * Productions that may be present after a PrimaryPrefix. The way this is written makes for a nice tree,
     * but also allows many invalid things to be written (which is fine because we parse compilable code).
     * E.g. this allows `foo().this.super::bar[0].this`
     *
     * Not all PrimaryPrefix expressions are here, eg
     */
    final public void PrimarySuffix() throws ParseException {
        switch (jj_nt.kind) {
        case METHOD_REF:
            MethodReference();
            break;
        case LPAREN:
            ASTMethodCall jjtn001 = new ASTMethodCall(this, JJTMETHODCALL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try {
                ArgumentsList();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte001;
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte001;
                    }
                }
                {
                    if (true) throw (Error) jjte001;
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, 2);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            break;
        case LBRACKET:
            ASTArrayAccess jjtn002 = new ASTArrayAccess(this, JJTARRAYACCESS);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try {
                jj_consume_token(LBRACKET);
                Expression();
                jj_consume_token(RBRACKET);
            } catch (Throwable jjte002) {
                if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte002;
                    }
                }
                if (jjte002 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte002;
                    }
                }
                {
                    if (true) throw (Error) jjte002;
                }
            } finally {
                if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, 2);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
            break;
        default:
            jj_la1[97] = jj_gen;
            if (jj_2_54(2)) {
                ASTThisExpression jjtn003 = new ASTThisExpression(this, JJTTHISEXPRESSION);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtn003.jjtSetFirstToken(getToken(1));
                try {
                    jj_consume_token(DOT);
                    jj_consume_token(THIS);
                } finally {
                    if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, 1);
                        jjtn003.jjtSetLastToken(getToken(0));
                    }
                }
            } else if (jj_2_55(2)) {
                ASTSuperExpression jjtn004 = new ASTSuperExpression(this, JJTSUPEREXPRESSION);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
                jjtn004.jjtSetFirstToken(getToken(1));
                try {
                    jj_consume_token(DOT);
                    jj_consume_token(SUPER);
                } finally {
                    if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, 1);
                        jjtn004.jjtSetLastToken(getToken(0));
                    }
                }
            } else if (jj_2_56(2)) {
                QualifiedAllocationExpr();
            } else {
                switch (jj_nt.kind) {
                case DOT:
                    MemberSelector();
                    break;
                default:
                    jj_la1[98] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
    }

    final public void LambdaExpression() throws ParseException {
        /*@bgen(jjtree) LambdaExpression */
        ASTLambdaExpression jjtn000 = new ASTLambdaExpression(this, JJTLAMBDAEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        checkForBadLambdaUsage();
        try {
            switch (jj_nt.kind) {
            case THIS:
            case IDENTIFIER:
                VariableDeclaratorId();
                jj_consume_token(LAMBDA);
                switch (jj_nt.kind) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case HEX_FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    Expression();
                    break;
                case LBRACE:
                    Block();
                    break;
                default:
                    jj_la1[99] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                break;
            default:
                jj_la1[103] = jj_gen;
                if (jj_2_57(3)) {
                    LambdaParameters();
                    jj_consume_token(LAMBDA);
                    switch (jj_nt.kind) {
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FALSE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case NEW:
                    case NULL:
                    case SHORT:
                    case SUPER:
                    case THIS:
                    case TRUE:
                    case VOID:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case HEX_FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case IDENTIFIER:
                    case LPAREN:
                    case BANG:
                    case TILDE:
                    case INCR:
                    case DECR:
                    case PLUS:
                    case MINUS:
                        Expression();
                        break;
                    case LBRACE:
                        Block();
                        break;
                    default:
                        jj_la1[100] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                } else if (jj_2_58(3)) {
                    jj_consume_token(LPAREN);
                    VariableDeclaratorId();
                    label_48:
                    while (true) {
                        switch (jj_nt.kind) {
                        case COMMA:
                            ;
                            break;
                        default:
                            jj_la1[101] = jj_gen;
                            break label_48;
                        }
                        jj_consume_token(COMMA);
                        VariableDeclaratorId();
                    }
                    jj_consume_token(RPAREN);
                    jj_consume_token(LAMBDA);
                    switch (jj_nt.kind) {
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FALSE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case NEW:
                    case NULL:
                    case SHORT:
                    case SUPER:
                    case THIS:
                    case TRUE:
                    case VOID:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case HEX_FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case IDENTIFIER:
                    case LPAREN:
                    case BANG:
                    case TILDE:
                    case INCR:
                    case DECR:
                    case PLUS:
                    case MINUS:
                        Expression();
                        break;
                    case LBRACE:
                        Block();
                        break;
                    default:
                        jj_la1[102] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void LambdaParameters() throws ParseException {
        /*@bgen(jjtree) FormalParameters */
        ASTFormalParameters jjtn000 = new ASTFormalParameters(this, JJTFORMALPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(LPAREN);
            if (jj_2_59(1)) {
                LambdaParameterList();
            } else {
                ;
            }
            jj_consume_token(RPAREN);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void LambdaParameterList() throws ParseException {
        LambdaParameter();
        label_49:
        while (true) {
            switch (jj_nt.kind) {
            case COMMA:
                ;
                break;
            default:
                jj_la1[104] = jj_gen;
                break label_49;
            }
            jj_consume_token(COMMA);
            LambdaParameter();
        }
    }

    final public void LambdaParameter() throws ParseException {
        /*@bgen(jjtree) FormalParameter */
        ASTFormalParameter jjtn000 = new ASTFormalParameter(this, JJTFORMALPARAMETER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            label_50:
            while (true) {
                switch (jj_nt.kind) {
                case FINAL:
                case AT:
                    ;
                    break;
                default:
                    jj_la1[105] = jj_gen;
                    break label_50;
                }
                switch (jj_nt.kind) {
                case FINAL:
                    jj_consume_token(FINAL);
                    jjtn000.setFinal(true);
                    break;
                case AT:
                    Annotation();
                    break;
                default:
                    jj_la1[106] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            LambdaParameterType();
            switch (jj_nt.kind) {
            case ELLIPSIS:
                jj_consume_token(ELLIPSIS);
                checkForBadVariableArgumentsUsage();
                jjtn000.setVarargs();
                break;
            default:
                jj_la1[107] = jj_gen;
                ;
            }
            VariableDeclaratorId();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void LambdaParameterType() throws ParseException {
        if (jdkVersion >= 11 && isKeyword("var")) {
            jj_consume_token(IDENTIFIER);
        } else {
            switch (jj_nt.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case IDENTIFIER:
                Type();
                break;
            default:
                jj_la1[108] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    // TODO compound expression abstraction
    final public void Literal() throws ParseException {
        Token t;
        switch (jj_nt.kind) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case HEX_FLOATING_POINT_LITERAL:
            NumericLiteral();
            break;
        case STRING_LITERAL:
            StringLiteral();
            break;
        case CHARACTER_LITERAL:
            CharLiteral();
            break;
        case FALSE:
        case TRUE:
            ASTBooleanLiteral jjtn001 = new ASTBooleanLiteral(this, JJTBOOLEANLITERAL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try {
                switch (jj_nt.kind) {
                case TRUE:
                    jj_consume_token(TRUE);
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                    jjtn001.setTrue();
                    break;
                case FALSE:
                    jj_consume_token(FALSE);
                    break;
                default:
                    jj_la1[109] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            break;
        case NULL:
            ASTNullLiteral jjtn002 = new ASTNullLiteral(this, JJTNULLLITERAL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try {
                jj_consume_token(NULL);
            } finally {
                if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
            break;
        default:
            jj_la1[110] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void NumericLiteral() throws ParseException {
        /*@bgen(jjtree) NumericLiteral */
        ASTNumericLiteral jjtn000 = new ASTNumericLiteral(this, JJTNUMERICLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            switch (jj_nt.kind) {
            case INTEGER_LITERAL:
                t = jj_consume_token(INTEGER_LITERAL);
                jjtn000.setIntLiteral();
                break;
            case FLOATING_POINT_LITERAL:
                t = jj_consume_token(FLOATING_POINT_LITERAL);
                jjtn000.setFloatLiteral();
                break;
            case HEX_FLOATING_POINT_LITERAL:
                t = jj_consume_token(HEX_FLOATING_POINT_LITERAL);
                checkForBadHexFloatingPointLiteral();
                jjtn000.setFloatLiteral();
                break;
            default:
                jj_la1[111] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            checkForBadNumericalLiteralslUsage(t);
            jjtn000.setImage(t.image);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void CharLiteral() throws ParseException {
        /*@bgen(jjtree) CharLiteral */
        ASTCharLiteral jjtn000 = new ASTCharLiteral(this, JJTCHARLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(CHARACTER_LITERAL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setImage(getToken(0).getImage());
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void StringLiteral() throws ParseException {
        /*@bgen(jjtree) StringLiteral */
        ASTStringLiteral jjtn000 = new ASTStringLiteral(this, JJTSTRINGLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(STRING_LITERAL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setImage(getToken(0).getImage());
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Arguments() throws ParseException {
        /*@bgen(jjtree) Arguments */
        ASTArguments jjtn000 = new ASTArguments(this, JJTARGUMENTS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ArgumentsList();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ArgumentsList() throws ParseException {
        /*@bgen(jjtree) ArgumentList */
        ASTArgumentList jjtn000 = new ASTArgumentList(this, JJTARGUMENTLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(LPAREN);
            switch (jj_nt.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case HEX_FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                Expression();
                label_51:
                while (true) {
                    switch (jj_nt.kind) {
                    case COMMA:
                        ;
                        break;
                    default:
                        jj_la1[112] = jj_gen;
                        break label_51;
                    }
                    jj_consume_token(COMMA);
                    Expression();
                }
                break;
            default:
                jj_la1[113] = jj_gen;
                ;
            }
            jj_consume_token(RPAREN);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    // TODO remove
    final public void AllocationExpression() throws ParseException {
        /*@bgen(jjtree) AllocationExpression */
        ASTAllocationExpression jjtn000 = new ASTAllocationExpression(this, JJTALLOCATIONEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(NEW);
            label_52:
            while (true) {
                switch (jj_nt.kind) {
                case AT:
                    ;
                    break;
                default:
                    jj_la1[114] = jj_gen;
                    break label_52;
                }
                TypeAnnotation();
            }
            switch (jj_nt.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                PrimitiveType();
                ArrayDimsAndInits();
                break;
            case IDENTIFIER:
                ClassOrInterfaceType();
                switch (jj_nt.kind) {
                case LBRACKET:
                case AT:
                    ArrayDimsAndInits();
                    break;
                case LPAREN:
                    ArgumentsList();
                    switch (jj_nt.kind) {
                    case LBRACE:
                        boolean inInterfaceOld = inInterface;
                        inInterface = false; /* a anonymous class is not a interface */
                        ClassOrInterfaceBody();
                        inInterface = inInterfaceOld;
                        break;
                    default:
                        jj_la1[115] = jj_gen;
                        ;
                    }
                    break;
                default:
                    jj_la1[116] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetLastToken(getToken(0));
                checkForBadAnonymousDiamondUsage();
                break;
            default:
                jj_la1[117] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    // more straightforward because can't be an array creation expr
    final public void QualifiedAllocationExpr() throws ParseException {
        /*@bgen(jjtree) ConstructorCall */
        ASTConstructorCall jjtn000 = new ASTConstructorCall(this, JJTCONSTRUCTORCALL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(DOT);
            jj_consume_token(NEW);
            jjtree.extendLeft();
            switch (jj_nt.kind) {
            case LT:
                TypeArguments();
                break;
            default:
                jj_la1[118] = jj_gen;
                ;
            }
            TypeAnnotationList();
            ClassOrInterfaceType();
            ArgumentsList();
            switch (jj_nt.kind) {
            case LBRACE:
                boolean inInterfaceOld = inInterface;
                inInterface = false; /* a anonymous class is not a interface */
                ASTAnonymousClassDeclaration jjtn001 = new ASTAnonymousClassDeclaration(this, JJTANONYMOUSCLASSDECLARATION);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
                try {
                    ClassOrInterfaceBody();
                } catch (Throwable jjte001) {
                    if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte001;
                        }
                    }
                    if (jjte001 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte001;
                        }
                    }
                    {
                        if (true) throw (Error) jjte001;
                    }
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                    }
                }
                inInterface = inInterfaceOld;
                break;
            default:
                jj_la1[119] = jj_gen;
                ;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            checkForBadAnonymousDiamondUsage();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

// this is much weaker than the JLS but since we parse compilable code
// the actual terms we get respect the JLS.

    // only used in PrimaryPrefix
    final public void UnqualifiedAllocationExpr() throws ParseException {
        ASTConstructorCall jjtn003 = new ASTConstructorCall(this, JJTCONSTRUCTORCALL);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
        try {
            ASTArrayAllocation jjtn002 = new ASTArrayAllocation(this, JJTARRAYALLOCATION);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try {
                jj_consume_token(NEW);
                switch (jj_nt.kind) {
                case LT:
                    TypeArguments();
                    break;
                default:
                    jj_la1[120] = jj_gen;
                    ;
                }
                label_53:
                while (true) {
                    switch (jj_nt.kind) {
                    case AT:
                        ;
                        break;
                    default:
                        jj_la1[121] = jj_gen;
                        break label_53;
                    }
                    TypeAnnotation();
                }
                switch (jj_nt.kind) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case SHORT:
                    PrimitiveType();
                    ArrayDimsAndInits();
                    break;
                case IDENTIFIER:
                    ClassOrInterfaceType();
                    switch (jj_nt.kind) {
                    case LBRACKET:
                    case AT:
                        ArrayDimsAndInits();
                        break;
                    case LPAREN:
                        ArgumentsList();
                        switch (jj_nt.kind) {
                        case LBRACE:
                            boolean inInterfaceOld = inInterface;
                            inInterface = false; /* a anonymous class is not a interface */
                            ASTAnonymousClassDeclaration jjtn001 = new ASTAnonymousClassDeclaration(this, JJTANONYMOUSCLASSDECLARATION);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtn001.jjtSetFirstToken(getToken(1));
                            try {
                                ClassOrInterfaceBody();
                            } catch (Throwable jjte001) {
                                if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                } else {
                                    jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                    {
                                        if (true) throw (RuntimeException) jjte001;
                                    }
                                }
                                if (jjte001 instanceof ParseException) {
                                    {
                                        if (true) throw (ParseException) jjte001;
                                    }
                                }
                                {
                                    if (true) throw (Error) jjte001;
                                }
                            } finally {
                                if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                }
                            }
                            inInterface = inInterfaceOld;
                            break;
                        default:
                            jj_la1[122] = jj_gen;
                            ;
                        }
                        break;
                    default:
                        jj_la1[123] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[124] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            } catch (Throwable jjte002) {
                if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte002;
                    }
                }
                if (jjte002 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte002;
                    }
                }
                {
                    if (true) throw (Error) jjte002;
                }
            } finally {
                if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, jjtree.peekNode() instanceof ASTArrayDimsAndInits);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
        } catch (Throwable jjte003) {
            if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte003;
                }
            }
            if (jjte003 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte003;
                }
            }
            {
                if (true) throw (Error) jjte003;
            }
        } finally {
            if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
                jjtn003.jjtSetLastToken(getToken(0));
            }
        }
        checkForBadAnonymousDiamondUsage();
    }

    /*
     * The second LOOKAHEAD specification below is to parse to PrimarySuffix
     * if there is an expression between the "[...]".
     * TODO use ArrayTypeDims
     */
    final public void ArrayDimsAndInits() throws ParseException {
        /*@bgen(jjtree) ArrayDimsAndInits */
        ASTArrayDimsAndInits jjtn000 = new ASTArrayDimsAndInits(this, JJTARRAYDIMSANDINITS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_62(2)) {
                label_54:
                while (true) {
                    label_55:
                    while (true) {
                        switch (jj_nt.kind) {
                        case AT:
                            ;
                            break;
                        default:
                            jj_la1[125] = jj_gen;
                            break label_55;
                        }
                        TypeAnnotation();
                    }
                    jj_consume_token(LBRACKET);
                    Expression();
                    jj_consume_token(RBRACKET);
                    jjtn000.bumpArrayDepth();
                    if (jj_2_60(2)) {
                        ;
                    } else {
                        break label_54;
                    }
                }
                label_56:
                while (true) {
                    if (jj_2_61(2)) {
                        ;
                    } else {
                        break label_56;
                    }
                    jj_consume_token(LBRACKET);
                    jj_consume_token(RBRACKET);
                    jjtn000.bumpArrayDepth();
                }
            } else {
                switch (jj_nt.kind) {
                case LBRACKET:
                    label_57:
                    while (true) {
                        jj_consume_token(LBRACKET);
                        jj_consume_token(RBRACKET);
                        jjtn000.bumpArrayDepth();
                        switch (jj_nt.kind) {
                        case LBRACKET:
                            ;
                            break;
                        default:
                            jj_la1[126] = jj_gen;
                            break label_57;
                        }
                    }
                    ArrayInitializer();
                    break;
                default:
                    jj_la1[127] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*
     * Statement syntax follows.
     */
    final public void Statement() throws ParseException {
        /*@bgen(jjtree) Statement */
        ASTStatement jjtn000 = new ASTStatement(this, JJTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (isNextTokenAnAssert()) {
                AssertStatement();
            } else if (jj_2_63(2)) {
                LabeledStatement();
            } else {
                switch (jj_nt.kind) {
                case LBRACE:
                    Block();
                    break;
                case SEMICOLON:
                    EmptyStatement();
                    break;
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case HEX_FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case INCR:
                case DECR:
                    StatementExpression();
                    jj_consume_token(SEMICOLON);
                    break;
                case SWITCH:
                    SwitchStatement();
                    break;
                case IF:
                    IfStatement();
                    break;
                case WHILE:
                    WhileStatement();
                    break;
                case DO:
                    DoStatement();
                    break;
                case FOR:
                    ForStatement();
                    break;
                case BREAK:
                    BreakStatement();
                    break;
                case CONTINUE:
                    ContinueStatement();
                    break;
                case RETURN:
                    ReturnStatement();
                    break;
                case THROW:
                    ThrowStatement();
                    break;
                case SYNCHRONIZED:
                    SynchronizedStatement();
                    break;
                case TRY:
                    TryStatement();
                    break;
                default:
                    jj_la1[128] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void LabeledStatement() throws ParseException {
        /*@bgen(jjtree) LabeledStatement */
        ASTLabeledStatement jjtn000 = new ASTLabeledStatement(this, JJTLABELEDSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            t = jj_consume_token(IDENTIFIER);
            jjtn000.setImage(t.image);
            jj_consume_token(COLON);
            Statement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Block() throws ParseException {
        /*@bgen(jjtree) Block */
        ASTBlock jjtn000 = new ASTBlock(this, JJTBLOCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            jj_consume_token(LBRACE);
            label_58:
            while (true) {
                if (jj_2_64(1)) {
                    ;
                } else {
                    break label_58;
                }
                BlockStatement();
            }
            t = jj_consume_token(RBRACE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            if (isPrecededByComment(t)) {
                jjtn000.setContainsComment();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void BlockStatement() throws ParseException {
        /*@bgen(jjtree) BlockStatement */
        ASTBlockStatement jjtn000 = new ASTBlockStatement(this, JJTBLOCKSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (isNextTokenAnAssert()) {
                AssertStatement();
            } else if (jj_2_65(2147483647)) {
                LocalVariableDeclaration();
                jj_consume_token(SEMICOLON);
            } else if (jj_2_66(1)) {
                Statement();
            } else if (jj_2_67(2147483647)) {
                label_59:
                while (true) {
                    switch (jj_nt.kind) {
                    case AT:
                        ;
                        break;
                    default:
                        jj_la1[129] = jj_gen;
                        break label_59;
                    }
                    Annotation();
                }
                ClassOrInterfaceDeclaration(0);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*
     * See https://docs.oracle.com/javase/specs/jls/se10/html/jls-14.html#jls-14.4
     */
    final public void LocalVariableDeclaration() throws ParseException {
        /*@bgen(jjtree) LocalVariableDeclaration */
        ASTLocalVariableDeclaration jjtn000 = new ASTLocalVariableDeclaration(this, JJTLOCALVARIABLEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            label_60:
            while (true) {
                switch (jj_nt.kind) {
                case FINAL:
                case AT:
                    ;
                    break;
                default:
                    jj_la1[130] = jj_gen;
                    break label_60;
                }
                switch (jj_nt.kind) {
                case FINAL:
                    jj_consume_token(FINAL);
                    jjtn000.setFinal(true);
                    break;
                case AT:
                    Annotation();
                    break;
                default:
                    jj_la1[131] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            LocalVariableType();
            VariableDeclarator();
            label_61:
            while (true) {
                switch (jj_nt.kind) {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[132] = jj_gen;
                    break label_61;
                }
                jj_consume_token(COMMA);
                VariableDeclarator();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void LocalVariableType() throws ParseException {
        if (jdkVersion >= 10 && isKeyword("var")) {
            jj_consume_token(IDENTIFIER);
        } else {
            switch (jj_nt.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case IDENTIFIER:
                Type();
                break;
            default:
                jj_la1[133] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    final public void EmptyStatement() throws ParseException {
        /*@bgen(jjtree) EmptyStatement */
        ASTEmptyStatement jjtn000 = new ASTEmptyStatement(this, JJTEMPTYSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(SEMICOLON);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void StatementExpression() throws ParseException {
        /*@bgen(jjtree) StatementExpression */
        ASTStatementExpression jjtn000 = new ASTStatementExpression(this, JJTSTATEMENTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        AssignmentOp op = null;
        try {
            switch (jj_nt.kind) {
            case INCR:
                PreIncrementExpression();
                break;
            case DECR:
                PreDecrementExpression();
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case HEX_FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
                ASTAssignmentExpression jjtn001 = new ASTAssignmentExpression(this, JJTASSIGNMENTEXPRESSION);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
                try {
                    PostfixExpression();
                    switch (jj_nt.kind) {
                    case ASSIGN:
                    case PLUSASSIGN:
                    case MINUSASSIGN:
                    case STARASSIGN:
                    case SLASHASSIGN:
                    case ANDASSIGN:
                    case ORASSIGN:
                    case XORASSIGN:
                    case REMASSIGN:
                    case LSHIFTASSIGN:
                    case RSIGNEDSHIFTASSIGN:
                    case RUNSIGNEDSHIFTASSIGN:
                        op = AssignmentOperator();
                        jjtn001.setOp(op);
                        Expression();
                        break;
                    default:
                        jj_la1[134] = jj_gen;
                        ;
                    }
                } catch (Throwable jjte001) {
                    if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte001;
                        }
                    }
                    if (jjte001 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte001;
                        }
                    }
                    {
                        if (true) throw (Error) jjte001;
                    }
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                        jjtn001.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            default:
                jj_la1[135] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void SwitchStatement() throws ParseException {
        /*@bgen(jjtree) SwitchStatement */
        ASTSwitchStatement jjtn000 = new ASTSwitchStatement(this, JJTSWITCHSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(SWITCH);
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            jj_consume_token(LBRACE);
            label_62:
            while (true) {
                switch (jj_nt.kind) {
                case CASE:
                case _DEFAULT:
                    ;
                    break;
                default:
                    jj_la1[136] = jj_gen;
                    break label_62;
                }
                SwitchLabel();
                label_63:
                while (true) {
                    if (jj_2_68(1)) {
                        ;
                    } else {
                        break label_63;
                    }
                    BlockStatement();
                }
            }
            jj_consume_token(RBRACE);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void SwitchLabel() throws ParseException {
        /*@bgen(jjtree) SwitchLabel */
        ASTSwitchLabel jjtn000 = new ASTSwitchLabel(this, JJTSWITCHLABEL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch (jj_nt.kind) {
            case CASE:
                jj_consume_token(CASE);
                Expression();
                jj_consume_token(COLON);
                break;
            case _DEFAULT:
                jj_consume_token(_DEFAULT);
                jjtn000.setDefault();
                jj_consume_token(COLON);
                break;
            default:
                jj_la1[137] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void IfStatement() throws ParseException {
        /*@bgen(jjtree) IfStatement */
        ASTIfStatement jjtn000 = new ASTIfStatement(this, JJTIFSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(IF);
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            Statement();
            switch (jj_nt.kind) {
            case ELSE:
                jj_consume_token(ELSE);
                jjtn000.setHasElse();
                Statement();
                break;
            default:
                jj_la1[138] = jj_gen;
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void WhileStatement() throws ParseException {
        /*@bgen(jjtree) WhileStatement */
        ASTWhileStatement jjtn000 = new ASTWhileStatement(this, JJTWHILESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(WHILE);
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            Statement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void DoStatement() throws ParseException {
        /*@bgen(jjtree) DoStatement */
        ASTDoStatement jjtn000 = new ASTDoStatement(this, JJTDOSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(DO);
            Statement();
            jj_consume_token(WHILE);
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            jj_consume_token(SEMICOLON);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ForStatement() throws ParseException {
        /*@bgen(jjtree) ForStatement */
        ASTForStatement jjtn000 = new ASTForStatement(this, JJTFORSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(FOR);
            jj_consume_token(LPAREN);
            if (jj_2_70(2147483647)) {
                checkForBadJDK15ForLoopSyntaxArgumentsUsage();
                LocalVariableDeclaration();
                jj_consume_token(COLON);
                Expression();
            } else if (jj_2_71(1)) {
                if (jj_2_69(1)) {
                    ForInit();
                } else {
                    ;
                }
                jj_consume_token(SEMICOLON);
                switch (jj_nt.kind) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case HEX_FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    Expression();
                    break;
                default:
                    jj_la1[139] = jj_gen;
                    ;
                }
                jj_consume_token(SEMICOLON);
                switch (jj_nt.kind) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case HEX_FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case INCR:
                case DECR:
                    ForUpdate();
                    break;
                default:
                    jj_la1[140] = jj_gen;
                    ;
                }
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            jj_consume_token(RPAREN);
            Statement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ForInit() throws ParseException {
        /*@bgen(jjtree) ForInit */
        ASTForInit jjtn000 = new ASTForInit(this, JJTFORINIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_72(2147483647)) {
                LocalVariableDeclaration();
            } else {
                switch (jj_nt.kind) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case HEX_FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case INCR:
                case DECR:
                    StatementExpressionList();
                    break;
                default:
                    jj_la1[141] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void StatementExpressionList() throws ParseException {
        /*@bgen(jjtree) StatementExpressionList */
        ASTStatementExpressionList jjtn000 = new ASTStatementExpressionList(this, JJTSTATEMENTEXPRESSIONLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            StatementExpression();
            label_64:
            while (true) {
                switch (jj_nt.kind) {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[142] = jj_gen;
                    break label_64;
                }
                jj_consume_token(COMMA);
                StatementExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ForUpdate() throws ParseException {
        /*@bgen(jjtree) ForUpdate */
        ASTForUpdate jjtn000 = new ASTForUpdate(this, JJTFORUPDATE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            StatementExpressionList();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void BreakStatement() throws ParseException {
        /*@bgen(jjtree) BreakStatement */
        ASTBreakStatement jjtn000 = new ASTBreakStatement(this, JJTBREAKSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            jj_consume_token(BREAK);
            switch (jj_nt.kind) {
            case IDENTIFIER:
                t = jj_consume_token(IDENTIFIER);
                jjtn000.setImage(t.image);
                break;
            default:
                jj_la1[143] = jj_gen;
                ;
            }
            jj_consume_token(SEMICOLON);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ContinueStatement() throws ParseException {
        /*@bgen(jjtree) ContinueStatement */
        ASTContinueStatement jjtn000 = new ASTContinueStatement(this, JJTCONTINUESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            jj_consume_token(CONTINUE);
            switch (jj_nt.kind) {
            case IDENTIFIER:
                t = jj_consume_token(IDENTIFIER);
                jjtn000.setImage(t.image);
                break;
            default:
                jj_la1[144] = jj_gen;
                ;
            }
            jj_consume_token(SEMICOLON);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ReturnStatement() throws ParseException {
        /*@bgen(jjtree) ReturnStatement */
        ASTReturnStatement jjtn000 = new ASTReturnStatement(this, JJTRETURNSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(RETURN);
            switch (jj_nt.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case HEX_FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                Expression();
                break;
            default:
                jj_la1[145] = jj_gen;
                ;
            }
            jj_consume_token(SEMICOLON);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ThrowStatement() throws ParseException {
        /*@bgen(jjtree) ThrowStatement */
        ASTThrowStatement jjtn000 = new ASTThrowStatement(this, JJTTHROWSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(THROW);
            Expression();
            jj_consume_token(SEMICOLON);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void SynchronizedStatement() throws ParseException {
        /*@bgen(jjtree) SynchronizedStatement */
        ASTSynchronizedStatement jjtn000 = new ASTSynchronizedStatement(this, JJTSYNCHRONIZEDSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(SYNCHRONIZED);
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            Block();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void TryStatement() throws ParseException {
        /*@bgen(jjtree) TryStatement */
        ASTTryStatement jjtn000 = new ASTTryStatement(this, JJTTRYSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(TRY);
            switch (jj_nt.kind) {
            case LPAREN:
                ResourceSpecification();
                break;
            default:
                jj_la1[146] = jj_gen;
                ;
            }
            Block();
            label_65:
            while (true) {
                switch (jj_nt.kind) {
                case CATCH:
                    ;
                    break;
                default:
                    jj_la1[147] = jj_gen;
                    break label_65;
                }
                CatchStatement();
            }
            switch (jj_nt.kind) {
            case FINALLY:
                FinallyStatement();
                break;
            default:
                jj_la1[148] = jj_gen;
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ResourceSpecification() throws ParseException {
        /*@bgen(jjtree) ResourceSpecification */
        ASTResourceSpecification jjtn000 = new ASTResourceSpecification(this, JJTRESOURCESPECIFICATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            checkForBadTryWithResourcesUsage();
            jj_consume_token(LPAREN);
            Resources();
            if (jj_2_73(2)) {
                jj_consume_token(SEMICOLON);
            } else {
                ;
            }
            jj_consume_token(RPAREN);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Resources() throws ParseException {
        /*@bgen(jjtree) Resources */
        ASTResources jjtn000 = new ASTResources(this, JJTRESOURCES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            Resource();
            label_66:
            while (true) {
                if (jj_2_74(2)) {
                    ;
                } else {
                    break label_66;
                }
                jj_consume_token(SEMICOLON);
                Resource();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Resource() throws ParseException {
        /*@bgen(jjtree) Resource */
        ASTResource jjtn000 = new ASTResource(this, JJTRESOURCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_75(2147483647)) {
                label_67:
                while (true) {
                    switch (jj_nt.kind) {
                    case FINAL:
                    case AT:
                        ;
                        break;
                    default:
                        jj_la1[149] = jj_gen;
                        break label_67;
                    }
                    switch (jj_nt.kind) {
                    case FINAL:
                        jj_consume_token(FINAL);
                        jjtn000.setFinal(true);
                        break;
                    case AT:
                        Annotation();
                        break;
                    default:
                        jj_la1[150] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
                LocalVariableType();
                VariableDeclaratorId();
                jj_consume_token(ASSIGN);
                Expression();
            } else {
                switch (jj_nt.kind) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case HEX_FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                    PrimaryExpression();
                    checkForBadConciseTryWithResourcesUsage();
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));

                    break;
                default:
                    jj_la1[151] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void CatchStatement() throws ParseException {
        /*@bgen(jjtree) CatchStatement */
        ASTCatchStatement jjtn000 = new ASTCatchStatement(this, JJTCATCHSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(CATCH);
            jj_consume_token(LPAREN);
            FormalParameter();
            jj_consume_token(RPAREN);
            Block();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void FinallyStatement() throws ParseException {
        /*@bgen(jjtree) FinallyStatement */
        ASTFinallyStatement jjtn000 = new ASTFinallyStatement(this, JJTFINALLYSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(FINALLY);
            Block();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AssertStatement() throws ParseException {
        /*@bgen(jjtree) AssertStatement */
        ASTAssertStatement jjtn000 = new ASTAssertStatement(this, JJTASSERTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        if (jdkVersion <= 3) {
            throw new ParseException("Can't use 'assert' as a keyword when running in JDK 1.3 mode!");
        }
        try {
            jj_consume_token(IDENTIFIER);
            Expression();
            switch (jj_nt.kind) {
            case COLON:
                jj_consume_token(COLON);
                Expression();
                break;
            default:
                jj_la1[152] = jj_gen;
                ;
            }
            jj_consume_token(SEMICOLON);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /* We use productions to match >>>, >> and > so that we can keep the
     * type declaration syntax with generics clean
     */
    final public void RUNSIGNEDSHIFT() throws ParseException {
        /*@bgen(jjtree) RUNSIGNEDSHIFT */
        ASTRUNSIGNEDSHIFT jjtn000 = new ASTRUNSIGNEDSHIFT(this, JJTRUNSIGNEDSHIFT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (getToken(1).kind == GT &&
                ((Token.GTToken) getToken(1)).realKind == RUNSIGNEDSHIFT) {

            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            jj_consume_token(GT);
            jj_consume_token(GT);
            jj_consume_token(GT);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void RSIGNEDSHIFT() throws ParseException {
        /*@bgen(jjtree) RSIGNEDSHIFT */
        ASTRSIGNEDSHIFT jjtn000 = new ASTRSIGNEDSHIFT(this, JJTRSIGNEDSHIFT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (getToken(1).kind == GT &&
                ((Token.GTToken) getToken(1)).realKind == RSIGNEDSHIFT) {

            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            jj_consume_token(GT);
            jj_consume_token(GT);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /* Annotation syntax follows. */
    final public void Annotation() throws ParseException {
        if (jj_2_76(2147483647)) {
            NormalAnnotation();
        } else if (jj_2_77(2147483647)) {
            SingleMemberAnnotation();
        } else {
            switch (jj_nt.kind) {
            case AT:
                MarkerAnnotation();
                break;
            default:
                jj_la1[153] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        checkForBadAnnotationUsage();
    }

    final public void AnnotationBase(Node n) throws ParseException {
        String name = null;
        jj_consume_token(AT);
        name = VoidName();
        n.setImage(name);
    }

    final public void NormalAnnotation() throws ParseException {
        /*@bgen(jjtree) NormalAnnotation */
        ASTNormalAnnotation jjtn000 = new ASTNormalAnnotation(this, JJTNORMALANNOTATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            AnnotationBase(jjtn000);
            jj_consume_token(LPAREN);
            switch (jj_nt.kind) {
            case IDENTIFIER:
                MemberValuePairs();
                break;
            default:
                jj_la1[154] = jj_gen;
                ;
            }
            jj_consume_token(RPAREN);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void MarkerAnnotation() throws ParseException {
        /*@bgen(jjtree) MarkerAnnotation */
        ASTMarkerAnnotation jjtn000 = new ASTMarkerAnnotation(this, JJTMARKERANNOTATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            AnnotationBase(jjtn000);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void SingleMemberAnnotation() throws ParseException {
        /*@bgen(jjtree) SingleMemberAnnotation */
        ASTSingleMemberAnnotation jjtn000 = new ASTSingleMemberAnnotation(this, JJTSINGLEMEMBERANNOTATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            AnnotationBase(jjtn000);
            jj_consume_token(LPAREN);
            MemberValue();
            jj_consume_token(RPAREN);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void MemberValuePairs() throws ParseException {
        MemberValuePair();
        label_68:
        while (true) {
            switch (jj_nt.kind) {
            case COMMA:
                ;
                break;
            default:
                jj_la1[155] = jj_gen;
                break label_68;
            }
            jj_consume_token(COMMA);
            MemberValuePair();
        }
    }

    final public void MemberValuePair() throws ParseException {
        /*@bgen(jjtree) MemberValuePair */
        ASTMemberValuePair jjtn000 = new ASTMemberValuePair(this, JJTMEMBERVALUEPAIR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            t = jj_consume_token(IDENTIFIER);
            jjtn000.setImage(t.image);
            jj_consume_token(ASSIGN);
            MemberValue();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void MemberValue() throws ParseException {
        switch (jj_nt.kind) {
        case AT:
            Annotation();
            break;
        case LBRACE:
            MemberValueArrayInitializer();
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case HEX_FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
            ConditionalExpression();
            break;
        default:
            jj_la1[156] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void MemberValueArrayInitializer() throws ParseException {
        /*@bgen(jjtree) MemberValueArrayInitializer */
        ASTMemberValueArrayInitializer jjtn000 = new ASTMemberValueArrayInitializer(this, JJTMEMBERVALUEARRAYINITIALIZER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(LBRACE);
            switch (jj_nt.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case HEX_FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case AT:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                MemberValue();
                label_69:
                while (true) {
                    if (jj_2_78(2)) {
                        ;
                    } else {
                        break label_69;
                    }
                    jj_consume_token(COMMA);
                    MemberValue();
                }
                switch (jj_nt.kind) {
                case COMMA:
                    jj_consume_token(COMMA);
                    break;
                default:
                    jj_la1[157] = jj_gen;
                    ;
                }
                break;
            default:
                jj_la1[158] = jj_gen;
                ;
            }
            jj_consume_token(RBRACE);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*
     * We use that ghost production to factorise the check for JDK >= 1.8.
     */
    final public void TypeAnnotation() throws ParseException {
        Annotation();
        checkForBadTypeAnnotations();
    }

    /* Annotation Types. */
    final public void AnnotationTypeDeclaration(int modifiers) throws ParseException {
        /*@bgen(jjtree) AnnotationTypeDeclaration */
        ASTAnnotationTypeDeclaration jjtn000 = new ASTAnnotationTypeDeclaration(this, JJTANNOTATIONTYPEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        jjtn000.setModifiers(modifiers);
        try {
            jj_consume_token(AT);
            jj_consume_token(INTERFACE);
            t = jj_consume_token(IDENTIFIER);
            checkForBadAnnotationUsage();
            checkForBadTypeIdentifierUsage(t.image);
            jjtn000.setImage(t.image);
            AnnotationTypeBody();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AnnotationTypeBody() throws ParseException {
        /*@bgen(jjtree) AnnotationTypeBody */
        ASTAnnotationTypeBody jjtn000 = new ASTAnnotationTypeBody(this, JJTANNOTATIONTYPEBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(LBRACE);
            label_70:
            while (true) {
                switch (jj_nt.kind) {
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CLASS:
                case _DEFAULT:
                case DOUBLE:
                case FINAL:
                case FLOAT:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOLATILE:
                case STRICTFP:
                case IDENTIFIER:
                case SEMICOLON:
                case AT:
                    ;
                    break;
                default:
                    jj_la1[159] = jj_gen;
                    break label_70;
                }
                AnnotationTypeMemberDeclaration();
            }
            jj_consume_token(RBRACE);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AnnotationTypeMemberDeclaration() throws ParseException {
        /*@bgen(jjtree) AnnotationTypeMemberDeclaration */
        ASTAnnotationTypeMemberDeclaration jjtn000 = new ASTAnnotationTypeMemberDeclaration(this, JJTANNOTATIONTYPEMEMBERDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        int modifiers;
        try {
            switch (jj_nt.kind) {
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CLASS:
            case _DEFAULT:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case INTERFACE:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case STRICTFP:
            case IDENTIFIER:
            case AT:
                modifiers = Modifiers();
                if (jj_2_79(2147483647)) {
                    AnnotationMethodDeclaration(modifiers);
                } else {
                    switch (jj_nt.kind) {
                    case ABSTRACT:
                    case CLASS:
                    case FINAL:
                    case INTERFACE:
                        ClassOrInterfaceDeclaration(modifiers);
                        break;
                    default:
                        jj_la1[160] = jj_gen;
                        if (jj_2_80(3)) {
                            EnumDeclaration(modifiers);
                        } else {
                            switch (jj_nt.kind) {
                            case AT:
                                AnnotationTypeDeclaration(modifiers);
                                break;
                            case BOOLEAN:
                            case BYTE:
                            case CHAR:
                            case DOUBLE:
                            case FLOAT:
                            case INT:
                            case LONG:
                            case SHORT:
                            case IDENTIFIER:
                                FieldDeclaration(modifiers);
                                break;
                            default:
                                jj_la1[161] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                            }
                        }
                    }
                }
                break;
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            default:
                jj_la1[162] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AnnotationMethodDeclaration(int modifiers) throws ParseException {
        /*@bgen(jjtree) AnnotationMethodDeclaration */
        ASTAnnotationMethodDeclaration jjtn000 = new ASTAnnotationMethodDeclaration(this, JJTANNOTATIONMETHODDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        jjtn000.setModifiers(modifiers);
        try {
            Type();
            t = jj_consume_token(IDENTIFIER);
            jj_consume_token(LPAREN);
            jj_consume_token(RPAREN);
            switch (jj_nt.kind) {
            case _DEFAULT:
                DefaultValue();
                break;
            default:
                jj_la1[163] = jj_gen;
                ;
            }
            jj_consume_token(SEMICOLON);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setImage(t.image);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void DefaultValue() throws ParseException {
        /*@bgen(jjtree) DefaultValue */
        ASTDefaultValue jjtn000 = new ASTDefaultValue(this, JJTDEFAULTVALUE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(_DEFAULT);
            MemberValue();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ModuleDeclaration() throws ParseException {
        /*@bgen(jjtree) ModuleDeclaration */
        ASTModuleDeclaration jjtn000 = new ASTModuleDeclaration(this, JJTMODULEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        StringBuilder s = new StringBuilder();
        Token t;
        checkForBadModuleUsage();
        try {
            label_71:
            while (true) {
                switch (jj_nt.kind) {
                case AT:
                    ;
                    break;
                default:
                    jj_la1[164] = jj_gen;
                    break label_71;
                }
                Annotation();
            }
            if (isKeyword("open")) {
                jj_consume_token(IDENTIFIER);
                jjtn000.setOpen(true);
            } else {
                ;
            }
            if (isKeyword("module")) {

            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            jj_consume_token(IDENTIFIER);
            t = jj_consume_token(IDENTIFIER);
            s.append(t.image);
            label_72:
            while (true) {
                switch (jj_nt.kind) {
                case DOT:
                    ;
                    break;
                default:
                    jj_la1[165] = jj_gen;
                    break label_72;
                }
                jj_consume_token(DOT);
                t = jj_consume_token(IDENTIFIER);
                s.append('.').append(t.image);
            }
            jjtn000.setImage(s.toString());
            jj_consume_token(LBRACE);
            label_73:
            while (true) {
                if (jj_2_81(1)) {
                    ;
                } else {
                    break label_73;
                }
                ModuleDirective();
            }
            jj_consume_token(RBRACE);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ModuleDirective() throws ParseException {
        /*@bgen(jjtree) ModuleDirective */
        ASTModuleDirective jjtn000 = new ASTModuleDirective(this, JJTMODULEDIRECTIVE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_83(1)) {
                if (isKeyword("requires")) {

                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                jj_consume_token(IDENTIFIER);
                jjtn000.setType(ASTModuleDirective.DirectiveType.REQUIRES);
                if (jj_2_82(1)) {
                    if (isKeyword("transitive")) {
                        jj_consume_token(IDENTIFIER);
                        jjtn000.setRequiresModifier(ASTModuleDirective.RequiresModifier.TRANSITIVE);
                    } else {
                        switch (jj_nt.kind) {
                        case STATIC:
                            jj_consume_token(STATIC);
                            jjtn000.setRequiresModifier(ASTModuleDirective.RequiresModifier.STATIC);
                            break;
                        default:
                            jj_la1[166] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                } else {
                    ;
                }
                ModuleName();
                jj_consume_token(SEMICOLON);
            } else if (jj_2_84(1)) {
                if (isKeyword("exports")) {

                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                jj_consume_token(IDENTIFIER);
                jjtn000.setType(ASTModuleDirective.DirectiveType.EXPORTS);
                Name();
                if (isKeyword("to")) {
                    jj_consume_token(IDENTIFIER);
                    ModuleName();
                    label_74:
                    while (true) {
                        switch (jj_nt.kind) {
                        case COMMA:
                            ;
                            break;
                        default:
                            jj_la1[167] = jj_gen;
                            break label_74;
                        }
                        jj_consume_token(COMMA);
                        ModuleName();
                    }
                } else {
                    ;
                }
                jj_consume_token(SEMICOLON);
            } else if (jj_2_85(1)) {
                if (isKeyword("opens")) {

                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                jj_consume_token(IDENTIFIER);
                jjtn000.setType(ASTModuleDirective.DirectiveType.OPENS);
                Name();
                if (isKeyword("to")) {
                    jj_consume_token(IDENTIFIER);
                    ModuleName();
                    label_75:
                    while (true) {
                        switch (jj_nt.kind) {
                        case COMMA:
                            ;
                            break;
                        default:
                            jj_la1[168] = jj_gen;
                            break label_75;
                        }
                        jj_consume_token(COMMA);
                        ModuleName();
                    }
                } else {
                    ;
                }
                jj_consume_token(SEMICOLON);
            } else if (jj_2_86(1)) {
                if (isKeyword("uses")) {

                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                jj_consume_token(IDENTIFIER);
                jjtn000.setType(ASTModuleDirective.DirectiveType.USES);
                Name();
                jj_consume_token(SEMICOLON);
            } else if (jj_2_87(1)) {
                if (isKeyword("provides")) {

                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                jj_consume_token(IDENTIFIER);
                jjtn000.setType(ASTModuleDirective.DirectiveType.PROVIDES);
                Name();
                if (isKeyword("with")) {

                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                jj_consume_token(IDENTIFIER);
                Name();
                label_76:
                while (true) {
                    switch (jj_nt.kind) {
                    case COMMA:
                        ;
                        break;
                    default:
                        jj_la1[169] = jj_gen;
                        break label_76;
                    }
                    jj_consume_token(COMMA);
                    Name();
                }
                jj_consume_token(SEMICOLON);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    // Similar to Name()
    final public void ModuleName() throws ParseException {
        /*@bgen(jjtree) ModuleName */
        ASTModuleName jjtn000 = new ASTModuleName(this, JJTMODULENAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        StringBuilder s = new StringBuilder();
        Token t;
        try {
            t = jj_consume_token(IDENTIFIER);
            s.append(t.image);
            label_77:
            while (true) {
                switch (jj_nt.kind) {
                case DOT:
                    ;
                    break;
                default:
                    jj_la1[170] = jj_gen;
                    break label_77;
                }
                jj_consume_token(DOT);
                t = jj_consume_token(IDENTIFIER);
                s.append('.').append(t.image);
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setImage(s.toString());
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Name() throws ParseException {
        /*@bgen(jjtree) Name */
        ASTName jjtn000 = new ASTName(this, JJTNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        String image;
        try {
            image = VoidName();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setImage(image);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AmbiguousName() throws ParseException {
        /*@bgen(jjtree) AmbiguousName */
        ASTAmbiguousName jjtn000 = new ASTAmbiguousName(this, JJTAMBIGUOUSNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        String image;
        try {
            image = VoidName();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setImage(image);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public String VoidName() throws ParseException {
        StringBuilder s = new StringBuilder();
        Token t;
        t = jj_consume_token(IDENTIFIER);
        s.append(t.image);
        label_78:
        while (true) {
            if (jj_2_88(2)) {
                ;
            } else {
                break label_78;
            }
            jj_consume_token(DOT);
            t = jj_consume_token(IDENTIFIER);
            s.append('.').append(t.image);
        }
        {
            if (true) return s.toString();
        }
        throw new RuntimeException("Missing return statement in function");
    }

    // This is used to get JJTree to generate a node.
// Since variable references are most of the time ambiguous, they're
// not created directly by the parser
//noinspection JavaCCJccUnusedProduction
    final public void VariableReference() throws ParseException {
        /*@bgen(jjtree) VariableReference */
        ASTVariableReference jjtn000 = new ASTVariableReference(this, JJTVARIABLEREFERENCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(IDENTIFIER);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_2_16(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_16();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(15, xla);
        }
    }

    private boolean jj_2_17(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_17();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(16, xla);
        }
    }

    private boolean jj_2_18(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_18();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(17, xla);
        }
    }

    private boolean jj_2_19(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_19();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(18, xla);
        }
    }

    private boolean jj_2_20(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_20();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(19, xla);
        }
    }

    private boolean jj_2_21(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_21();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(20, xla);
        }
    }

    private boolean jj_2_22(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_22();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(21, xla);
        }
    }

    private boolean jj_2_23(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_23();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(22, xla);
        }
    }

    private boolean jj_2_24(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_24();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(23, xla);
        }
    }

    private boolean jj_2_25(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_25();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(24, xla);
        }
    }

    private boolean jj_2_26(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_26();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(25, xla);
        }
    }

    private boolean jj_2_27(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_27();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(26, xla);
        }
    }

    private boolean jj_2_28(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_28();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(27, xla);
        }
    }

    private boolean jj_2_29(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_29();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(28, xla);
        }
    }

    private boolean jj_2_30(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_30();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(29, xla);
        }
    }

    private boolean jj_2_31(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_31();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(30, xla);
        }
    }

    private boolean jj_2_32(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_32();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(31, xla);
        }
    }

    private boolean jj_2_33(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_33();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(32, xla);
        }
    }

    private boolean jj_2_34(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_34();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(33, xla);
        }
    }

    private boolean jj_2_35(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_35();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(34, xla);
        }
    }

    private boolean jj_2_36(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_36();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(35, xla);
        }
    }

    private boolean jj_2_37(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_37();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(36, xla);
        }
    }

    private boolean jj_2_38(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_38();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(37, xla);
        }
    }

    private boolean jj_2_39(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_39();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(38, xla);
        }
    }

    private boolean jj_2_40(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_40();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(39, xla);
        }
    }

    private boolean jj_2_41(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_41();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(40, xla);
        }
    }

    private boolean jj_2_42(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_42();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(41, xla);
        }
    }

    private boolean jj_2_43(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_43();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(42, xla);
        }
    }

    private boolean jj_2_44(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_44();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(43, xla);
        }
    }

    private boolean jj_2_45(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_45();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(44, xla);
        }
    }

    private boolean jj_2_46(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_46();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(45, xla);
        }
    }

    private boolean jj_2_47(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_47();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(46, xla);
        }
    }

    private boolean jj_2_48(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_48();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(47, xla);
        }
    }

    private boolean jj_2_49(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_49();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(48, xla);
        }
    }

    private boolean jj_2_50(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_50();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(49, xla);
        }
    }

    private boolean jj_2_51(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_51();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(50, xla);
        }
    }

    private boolean jj_2_52(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_52();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(51, xla);
        }
    }

    private boolean jj_2_53(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_53();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(52, xla);
        }
    }

    private boolean jj_2_54(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_54();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(53, xla);
        }
    }

    private boolean jj_2_55(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_55();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(54, xla);
        }
    }

    private boolean jj_2_56(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_56();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(55, xla);
        }
    }

    private boolean jj_2_57(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_57();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(56, xla);
        }
    }

    private boolean jj_2_58(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_58();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(57, xla);
        }
    }

    private boolean jj_2_59(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_59();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(58, xla);
        }
    }

    private boolean jj_2_60(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_60();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(59, xla);
        }
    }

    private boolean jj_2_61(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_61();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(60, xla);
        }
    }

    private boolean jj_2_62(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_62();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(61, xla);
        }
    }

    private boolean jj_2_63(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_63();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(62, xla);
        }
    }

    private boolean jj_2_64(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_64();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(63, xla);
        }
    }

    private boolean jj_2_65(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_65();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(64, xla);
        }
    }

    private boolean jj_2_66(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_66();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(65, xla);
        }
    }

    private boolean jj_2_67(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_67();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(66, xla);
        }
    }

    private boolean jj_2_68(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_68();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(67, xla);
        }
    }

    private boolean jj_2_69(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_69();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(68, xla);
        }
    }

    private boolean jj_2_70(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_70();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(69, xla);
        }
    }

    private boolean jj_2_71(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_71();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(70, xla);
        }
    }

    private boolean jj_2_72(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_72();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(71, xla);
        }
    }

    private boolean jj_2_73(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_73();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(72, xla);
        }
    }

    private boolean jj_2_74(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_74();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(73, xla);
        }
    }

    private boolean jj_2_75(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_75();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(74, xla);
        }
    }

    private boolean jj_2_76(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_76();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(75, xla);
        }
    }

    private boolean jj_2_77(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_77();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(76, xla);
        }
    }

    private boolean jj_2_78(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_78();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(77, xla);
        }
    }

    private boolean jj_2_79(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_79();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(78, xla);
        }
    }

    private boolean jj_2_80(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_80();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(79, xla);
        }
    }

    private boolean jj_2_81(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_81();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(80, xla);
        }
    }

    private boolean jj_2_82(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_82();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(81, xla);
        }
    }

    private boolean jj_2_83(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_83();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(82, xla);
        }
    }

    private boolean jj_2_84(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_84();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(83, xla);
        }
    }

    private boolean jj_2_85(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_85();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(84, xla);
        }
    }

    private boolean jj_2_86(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_86();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(85, xla);
        }
    }

    private boolean jj_2_87(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_87();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(86, xla);
        }
    }

    private boolean jj_2_88(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_88();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(87, xla);
        }
    }

    private boolean jj_3R_470() {
        if (jj_3R_99()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_scan_token(RPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_471()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3_30() {
        if (jj_scan_token(BIT_OR)) return true;
        if (jj_3R_121()) return true;
        return false;
    }

    private boolean jj_3_31() {
        if (jj_scan_token(XOR)) return true;
        if (jj_3R_122()) return true;
        return false;
    }

    private boolean jj_3R_126() {
        if (jj_3R_219()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_34()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_29() {
        if (jj_scan_token(SC_AND)) return true;
        if (jj_3R_120()) return true;
        return false;
    }

    private boolean jj_3_79() {
        if (jj_3R_99()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private boolean jj_3R_123() {
        if (jj_3R_126()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_33()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_468() {
        if (jj_3R_201()) return true;
        return false;
    }

    private boolean jj_3_28() {
        if (jj_scan_token(SC_OR)) return true;
        if (jj_3R_119()) return true;
        return false;
    }

    private boolean jj_3R_467() {
        if (jj_3R_102()) return true;
        return false;
    }

    private boolean jj_3_80() {
        if (jj_3R_174()) return true;
        return false;
    }

    private boolean jj_3R_122() {
        if (jj_3R_123()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_32()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_466() {
        if (jj_3R_97()) return true;
        return false;
    }

    private boolean jj_3_27() {
        if (jj_scan_token(HOOK)) return true;
        if (jj_3R_118()) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_218()) return true;
        return false;
    }

    private boolean jj_3R_465() {
        if (jj_3R_470()) return true;
        return false;
    }

    private boolean jj_3R_121() {
        if (jj_3R_122()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_31()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_464() {
        if (jj_3R_103()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_465()) {
            jj_scanpos = xsp;
            if (jj_3R_466()) {
                jj_scanpos = xsp;
                if (jj_3_80()) {
                    jj_scanpos = xsp;
                    if (jj_3R_467()) {
                        jj_scanpos = xsp;
                        if (jj_3R_468()) return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_456() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_464()) {
            jj_scanpos = xsp;
            if (jj_scan_token(82)) return true;
        }
        return false;
    }

    private boolean jj_3R_445() {
        if (jj_3R_456()) return true;
        return false;
    }

    private boolean jj_3R_120() {
        if (jj_3R_121()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_30()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_428() {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_445()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private boolean jj_3R_119() {
        if (jj_3R_120()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_29()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_309() {
        if (jj_3R_119()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_28()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_102() {
        if (jj_scan_token(AT)) return true;
        if (jj_scan_token(INTERFACE)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_3R_428()) return true;
        return false;
    }

    private boolean jj_3_78() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_173()) return true;
        return false;
    }

    private boolean jj_3R_218() {
        if (jj_3R_309()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_27()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_214() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3R_419() {
        if (jj_3R_173()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_78()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_scan_token(83)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_345() {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_419()) jj_scanpos = xsp;
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private boolean jj_3R_410() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_409()) return true;
        return false;
    }

    private boolean jj_3R_117() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(86)) {
            jj_scanpos = xsp;
            if (jj_scan_token(111)) {
                jj_scanpos = xsp;
                if (jj_scan_token(112)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(116)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(109)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(110)) {
                                jj_scanpos = xsp;
                                if (jj_scan_token(117)) {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(118)) {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(119)) {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(113)) {
                                                jj_scanpos = xsp;
                                                if (jj_scan_token(115)) {
                                                    jj_scanpos = xsp;
                                                    if (jj_scan_token(114)) return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_272() {
        if (jj_3R_218()) return true;
        return false;
    }

    private boolean jj_3R_271() {
        if (jj_3R_345()) return true;
        return false;
    }

    private boolean jj_3_26() {
        if (jj_3R_117()) return true;
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3R_374() {
        if (jj_3R_392()) return true;
        return false;
    }

    private boolean jj_3R_173() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_270()) {
            jj_scanpos = xsp;
            if (jj_3R_271()) {
                jj_scanpos = xsp;
                if (jj_3R_272()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_270() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3R_118() {
        if (jj_3R_218()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_26()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_409() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(ASSIGN)) return true;
        if (jj_3R_173()) return true;
        return false;
    }

    private boolean jj_3R_392() {
        if (jj_3R_409()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_410()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_347() {
        if (jj_3R_373()) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_173()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_463() {
        if (jj_3R_214()) return true;
        return false;
    }

    private boolean jj_3R_172() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(ASSIGN)) return true;
        return false;
    }

    private boolean jj_3R_348() {
        if (jj_3R_373()) return true;
        return false;
    }

    private boolean jj_3R_455() {
        if (jj_scan_token(COMMA)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_463()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_156()) return true;
        return false;
    }

    private boolean jj_3R_240() {
        if (jj_3R_99()) return true;
        return false;
    }

    private boolean jj_3R_454() {
        if (jj_3R_214()) return true;
        return false;
    }

    private boolean jj_3R_443() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_454()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_156()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_455()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_346() {
        if (jj_3R_373()) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_374()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_284() {
        if (jj_3R_226()) return true;
        return false;
    }

    private boolean jj_3R_373() {
        if (jj_scan_token(AT)) return true;
        if (jj_3R_243()) return true;
        return false;
    }

    private boolean jj_3_77() {
        if (jj_scan_token(AT)) return true;
        if (jj_3R_156()) return true;
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private boolean jj_3R_153() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(59)) {
            jj_scanpos = xsp;
            if (jj_3R_240()) return true;
        }
        return false;
    }

    private boolean jj_3_76() {
        if (jj_scan_token(AT)) return true;
        if (jj_3R_156()) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_172()) {
            jj_scanpos = xsp;
            if (jj_scan_token(77)) return true;
        }
        return false;
    }

    private boolean jj_3R_198() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(59)) {
            jj_scanpos = xsp;
            if (jj_3R_284()) return true;
        }
        return false;
    }

    private boolean jj_3R_277() {
        if (jj_3R_348()) return true;
        return false;
    }

    private boolean jj_3R_276() {
        if (jj_3R_347()) return true;
        return false;
    }

    private boolean jj_3R_275() {
        if (jj_3R_346()) return true;
        return false;
    }

    private boolean jj_3R_220() {
        return false;
    }

    private boolean jj_3R_305() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_116()) return true;
        return false;
    }

    private boolean jj_3R_183() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_275()) {
            jj_scanpos = xsp;
            if (jj_3R_276()) {
                jj_scanpos = xsp;
                if (jj_3R_277()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_422() {
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3R_144() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(13)) {
            jj_scanpos = xsp;
            if (jj_scan_token(18)) {
                jj_scanpos = xsp;
                if (jj_scan_token(15)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(48)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(37)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(39)) {
                                jj_scanpos = xsp;
                                if (jj_scan_token(30)) {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(24)) return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_217() {
        if (jj_3R_308()) return true;
        return false;
    }

    private boolean jj_3R_221() {
        return false;
    }

    private boolean jj_3R_134() {
        jj_lookingAhead = true;
        jj_semLA = getToken(1).kind == GT &&
            ((Token.GTToken) getToken(1)).realKind == RSIGNEDSHIFT;
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_220()) return true;
        if (jj_scan_token(GT)) return true;
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private boolean jj_3R_372() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3R_135() {
        jj_lookingAhead = true;
        jj_semLA = getToken(1).kind == GT &&
            ((Token.GTToken) getToken(1)).realKind == RUNSIGNEDSHIFT;
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_221()) return true;
        if (jj_scan_token(GT)) return true;
        if (jj_scan_token(GT)) return true;
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private boolean jj_3R_416() {
        if (jj_scan_token(EXTENDS)) return true;
        return false;
    }

    private boolean jj_3R_216() {
        if (jj_3R_154()) return true;
        return false;
    }

    private boolean jj_3R_408() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_416()) {
            jj_scanpos = xsp;
            if (jj_scan_token(50)) return true;
        }
        if (jj_3R_417()) return true;
        return false;
    }

    private boolean jj_3R_289() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_3R_118()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_422()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_308() {
        if (jj_scan_token(HOOK)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_408()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_268() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3R_452() {
        if (jj_scan_token(FINALLY)) return true;
        if (jj_3R_326()) return true;
        return false;
    }

    private boolean jj_3_74() {
        if (jj_scan_token(SEMICOLON)) return true;
        if (jj_3R_169()) return true;
        return false;
    }

    private boolean jj_3R_170() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(28)) {
            jj_scanpos = xsp;
            if (jj_3R_268()) return true;
        }
        return false;
    }

    private boolean jj_3_75() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_170()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_171()) return true;
        if (jj_3R_150()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        return false;
    }

    private boolean jj_3R_451() {
        if (jj_scan_token(CATCH)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_322()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_326()) return true;
        return false;
    }

    private boolean jj_3R_116() {
        if (jj_3R_215()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_216()) {
            jj_scanpos = xsp;
            if (jj_3R_217()) return true;
        }
        return false;
    }

    private boolean jj_3R_371() {
        if (jj_scan_token(FINAL)) return true;
        return false;
    }

    private boolean jj_3R_344() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_371()) {
            jj_scanpos = xsp;
            if (jj_3R_372()) return true;
        }
        return false;
    }

    private boolean jj_3R_267() {
        if (jj_3R_110()) return true;
        return false;
    }

    private boolean jj_3R_211() {
        if (jj_scan_token(LT)) return true;
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private boolean jj_3R_169() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_266()) {
            jj_scanpos = xsp;
            if (jj_3R_267()) return true;
        }
        return false;
    }

    private boolean jj_3R_266() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_344()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_171()) return true;
        if (jj_3R_150()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3R_460() {
        if (jj_3R_169()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_74()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_112() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_25()) {
            jj_scanpos = xsp;
            if (jj_3R_211()) return true;
        }
        return false;
    }

    private boolean jj_3_25() {
        if (jj_scan_token(LT)) return true;
        if (jj_3R_116()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_305()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private boolean jj_3_24() {
        if (jj_scan_token(LT)) return true;
        return false;
    }

    private boolean jj_3_73() {
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_386() {
        if (jj_3R_112()) return true;
        return false;
    }

    private boolean jj_3R_450() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_460()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_73()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_115() {
        if (jj_3R_214()) return true;
        return false;
    }

    private boolean jj_3R_435() {
        if (jj_3R_450()) return true;
        return false;
    }

    private boolean jj_3R_437() {
        if (jj_3R_452()) return true;
        return false;
    }

    private boolean jj_3R_436() {
        if (jj_3R_451()) return true;
        return false;
    }

    private boolean jj_3R_339() {
        if (jj_scan_token(TRY)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_435()) jj_scanpos = xsp;
        if (jj_3R_326()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_436()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_437()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_23() {
        if (jj_scan_token(DOT)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_115()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(IDENTIFIER)) return true;
        xsp = jj_scanpos;
        if (jj_3R_386()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_356() {
        if (jj_3R_112()) return true;
        return false;
    }

    private boolean jj_3R_338() {
        if (jj_scan_token(SYNCHRONIZED)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_118()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_326()) return true;
        return false;
    }

    private boolean jj_3R_434() {
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3R_433() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_337() {
        if (jj_scan_token(THROW)) return true;
        if (jj_3R_118()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_469() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_328()) return true;
        return false;
    }

    private boolean jj_3R_336() {
        if (jj_scan_token(RETURN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_434()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_432() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3_22() {
        if (jj_3R_114()) return true;
        return false;
    }

    private boolean jj_3R_335() {
        if (jj_scan_token(CONTINUE)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_433()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_334() {
        if (jj_scan_token(BREAK)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_432()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_459() {
        if (jj_3R_340()) return true;
        return false;
    }

    private boolean jj_3_72() {
        if (jj_3R_168()) return true;
        return false;
    }

    private boolean jj_3R_314() {
        if (jj_3R_354()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_356()) jj_scanpos = xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_23()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_340() {
        if (jj_3R_328()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_469()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_430() {
        if (jj_scan_token(ELSE)) return true;
        if (jj_3R_164()) return true;
        return false;
    }

    private boolean jj_3R_262() {
        if (jj_3R_340()) return true;
        return false;
    }

    private boolean jj_3R_242() {
        if (jj_3R_314()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_22()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_70() {
        if (jj_3R_168()) return true;
        if (jj_scan_token(COLON)) return true;
        return false;
    }

    private boolean jj_3R_167() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_261()) {
            jj_scanpos = xsp;
            if (jj_3R_262()) return true;
        }
        return false;
    }

    private boolean jj_3R_261() {
        if (jj_3R_168()) return true;
        return false;
    }

    private boolean jj_3R_449() {
        if (jj_3R_459()) return true;
        return false;
    }

    private boolean jj_3R_448() {
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3R_154() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_241()) {
            jj_scanpos = xsp;
            if (jj_3R_242()) return true;
        }
        return false;
    }

    private boolean jj_3R_241() {
        if (jj_3R_144()) return true;
        if (jj_3R_114()) return true;
        return false;
    }

    private boolean jj_3_69() {
        if (jj_3R_167()) return true;
        return false;
    }

    private boolean jj_3R_431() {
        if (jj_3R_168()) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3_71() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_69()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        xsp = jj_scanpos;
        if (jj_3R_448()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        xsp = jj_scanpos;
        if (jj_3R_449()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_306() {
        if (jj_3R_214()) return true;
        return false;
    }

    private boolean jj_3R_212() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_306()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private boolean jj_3R_333() {
        if (jj_scan_token(FOR)) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_431()) {
            jj_scanpos = xsp;
            if (jj_3_71()) return true;
        }
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_164()) return true;
        return false;
    }

    private boolean jj_3R_213() {
        if (jj_3R_212()) return true;
        return false;
    }

    private boolean jj_3R_113() {
        if (jj_3R_144()) return true;
        if (jj_3R_212()) return true;
        return false;
    }

    private boolean jj_3_21() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_113()) {
            jj_scanpos = xsp;
            if (jj_scan_token(73)) return true;
        }
        return false;
    }

    private boolean jj_3R_332() {
        if (jj_scan_token(DO)) return true;
        if (jj_3R_164()) return true;
        if (jj_scan_token(WHILE)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_118()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_114() {
        Token xsp;
        if (jj_3R_213()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_213()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_331() {
        if (jj_scan_token(WHILE)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_118()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_164()) return true;
        return false;
    }

    private boolean jj_3R_196() {
        if (jj_3R_144()) return true;
        return false;
    }

    private boolean jj_3R_99() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_195()) {
            jj_scanpos = xsp;
            if (jj_3R_196()) return true;
        }
        return false;
    }

    private boolean jj_3R_195() {
        if (jj_3R_154()) return true;
        return false;
    }

    private boolean jj_3R_330() {
        if (jj_scan_token(IF)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_118()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_164()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_430()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_68() {
        if (jj_3R_109()) return true;
        return false;
    }

    private boolean jj_3R_446() {
        if (jj_3R_117()) return true;
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3R_290() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3R_458() {
        if (jj_scan_token(_DEFAULT)) return true;
        if (jj_scan_token(COLON)) return true;
        return false;
    }

    private boolean jj_3R_457() {
        if (jj_scan_token(CASE)) return true;
        if (jj_3R_118()) return true;
        if (jj_scan_token(COLON)) return true;
        return false;
    }

    private boolean jj_3R_447() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_457()) {
            jj_scanpos = xsp;
            if (jj_3R_458()) return true;
        }
        return false;
    }

    private boolean jj_3R_438() {
        if (jj_3R_215()) return true;
        if (jj_3R_314()) return true;
        return false;
    }

    private boolean jj_3R_429() {
        if (jj_3R_447()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_68()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_342() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3R_423() {
        if (jj_scan_token(THROWS)) return true;
        if (jj_3R_443()) return true;
        return false;
    }

    private boolean jj_3R_417() {
        if (jj_3R_215()) return true;
        if (jj_3R_154()) return true;
        return false;
    }

    private boolean jj_3R_288() {
        if (jj_3R_112()) return true;
        return false;
    }

    private boolean jj_3R_329() {
        if (jj_scan_token(SWITCH)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_118()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_429()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private boolean jj_3R_226() {
        if (jj_3R_215()) return true;
        if (jj_3R_99()) return true;
        return false;
    }

    private boolean jj_3R_227() {
        if (jj_scan_token(BIT_AND)) return true;
        if (jj_3R_314()) return true;
        return false;
    }

    private boolean jj_3R_370() {
        if (jj_3R_318()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_446()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_369() {
        if (jj_3R_313()) return true;
        return false;
    }

    private boolean jj_3R_307() {
        if (jj_3R_214()) return true;
        return false;
    }

    private boolean jj_3R_215() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_307()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_368() {
        if (jj_3R_312()) return true;
        return false;
    }

    private boolean jj_3R_328() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_368()) {
            jj_scanpos = xsp;
            if (jj_3R_369()) {
                jj_scanpos = xsp;
                if (jj_3R_370()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_166() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(28)) {
            jj_scanpos = xsp;
            if (jj_scan_token(12)) return true;
        }
        return false;
    }

    private boolean jj_3R_232() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3_61() {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private boolean jj_3R_147() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_232()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_327() {
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_269() {
        if (jj_3R_99()) return true;
        return false;
    }

    private boolean jj_3R_145() {
        if (jj_3R_226()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_227()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_171() {
        Token xsp;
        xsp = jj_scanpos;
        jj_lookingAhead = true;
        jj_semLA = jdkVersion >= 10 && isKeyword("var");
        jj_lookingAhead = false;
        if (!jj_semLA || jj_scan_token(73)) {
            jj_scanpos = xsp;
            if (jj_3R_269()) return true;
        }
        return false;
    }

    private boolean jj_3R_265() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_264()) return true;
        return false;
    }

    private boolean jj_3R_165() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3R_341() {
        if (jj_scan_token(FINAL)) return true;
        return false;
    }

    private boolean jj_3_67() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_165()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_166()) jj_scanpos = xsp;
        if (jj_scan_token(CLASS)) return true;
        return false;
    }

    private boolean jj_3R_245() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3R_263() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_341()) {
            jj_scanpos = xsp;
            if (jj_3R_342()) return true;
        }
        return false;
    }

    private boolean jj_3R_168() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_263()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_171()) return true;
        if (jj_3R_264()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_265()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_163() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(28)) {
            jj_scanpos = xsp;
            if (jj_3R_245()) return true;
        }
        return false;
    }

    private boolean jj_3R_209() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_290()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_97()) return true;
        return false;
    }

    private boolean jj_3_65() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_163()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_99()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_390() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3_66() {
        if (jj_3R_164()) return true;
        return false;
    }

    private boolean jj_3_18() {
        if (jj_3R_110()) return true;
        if (jj_scan_token(DOT)) return true;
        return false;
    }

    private boolean jj_3R_208() {
        if (jj_3R_168()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_349() {
        if (jj_scan_token(STATIC)) return true;
        return false;
    }

    private boolean jj_3_20() {
        if (jj_3R_112()) return true;
        if (jj_scan_token(THIS)) return true;
        if (jj_3R_111()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_109() {
        Token xsp;
        xsp = jj_scanpos;
        jj_lookingAhead = true;
        jj_semLA = isNextTokenAnAssert();
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_207()) {
            jj_scanpos = xsp;
            if (jj_3R_208()) {
                jj_scanpos = xsp;
                if (jj_3_66()) {
                    jj_scanpos = xsp;
                    if (jj_3R_209()) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3_64() {
        if (jj_3R_109()) return true;
        return false;
    }

    private boolean jj_3R_207() {
        if (jj_3R_289()) return true;
        return false;
    }

    private boolean jj_3R_278() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_349()) jj_scanpos = xsp;
        if (jj_3R_326()) return true;
        return false;
    }

    private boolean jj_3_19() {
        if (jj_scan_token(THIS)) return true;
        if (jj_3R_111()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_326() {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_64()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private boolean jj_3R_287() {
        if (jj_3R_110()) return true;
        if (jj_scan_token(DOT)) return true;
        return false;
    }

    private boolean jj_3_16() {
        if (jj_3R_108()) return true;
        return false;
    }

    private boolean jj_3R_206() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_287()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_288()) jj_scanpos = xsp;
        if (jj_scan_token(SUPER)) return true;
        if (jj_3R_111()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_205() {
        if (jj_3R_112()) return true;
        if (jj_scan_token(THIS)) return true;
        if (jj_3R_111()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_108() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_204()) {
            jj_scanpos = xsp;
            if (jj_3R_205()) {
                jj_scanpos = xsp;
                if (jj_3R_206()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_204() {
        if (jj_scan_token(THIS)) return true;
        if (jj_3R_111()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_323() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_322()) return true;
        return false;
    }

    private boolean jj_3R_162() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_164()) return true;
        return false;
    }

    private boolean jj_3_17() {
        if (jj_3R_109()) return true;
        return false;
    }

    private boolean jj_3R_424() {
        if (jj_3R_108()) return true;
        return false;
    }

    private boolean jj_3R_285() {
        if (jj_3R_194()) return true;
        return false;
    }

    private boolean jj_3R_260() {
        if (jj_3R_339()) return true;
        return false;
    }

    private boolean jj_3R_200() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_285()) jj_scanpos = xsp;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_3R_152()) return true;
        xsp = jj_scanpos;
        if (jj_3R_423()) jj_scanpos = xsp;
        if (jj_scan_token(LBRACE)) return true;
        xsp = jj_scanpos;
        if (jj_3R_424()) jj_scanpos = xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_17()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private boolean jj_3R_259() {
        if (jj_3R_338()) return true;
        return false;
    }

    private boolean jj_3R_258() {
        if (jj_3R_337()) return true;
        return false;
    }

    private boolean jj_3R_363() {
        if (jj_scan_token(BIT_OR)) return true;
        if (jj_3R_99()) return true;
        return false;
    }

    private boolean jj_3R_257() {
        if (jj_3R_336()) return true;
        return false;
    }

    private boolean jj_3R_256() {
        if (jj_3R_335()) return true;
        return false;
    }

    private boolean jj_3R_255() {
        if (jj_3R_334()) return true;
        return false;
    }

    private boolean jj_3R_444() {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private boolean jj_3R_426() {
        if (jj_scan_token(THROWS)) return true;
        if (jj_3R_443()) return true;
        return false;
    }

    private boolean jj_3R_254() {
        if (jj_3R_333()) return true;
        return false;
    }

    private boolean jj_3R_253() {
        if (jj_3R_332()) return true;
        return false;
    }

    private boolean jj_3R_364() {
        if (jj_scan_token(ELLIPSIS)) return true;
        return false;
    }

    private boolean jj_3R_252() {
        if (jj_3R_331()) return true;
        return false;
    }

    private boolean jj_3R_251() {
        if (jj_3R_330()) return true;
        return false;
    }

    private boolean jj_3R_389() {
        if (jj_scan_token(FINAL)) return true;
        return false;
    }

    private boolean jj_3R_362() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_389()) {
            jj_scanpos = xsp;
            if (jj_3R_390()) return true;
        }
        return false;
    }

    private boolean jj_3R_250() {
        if (jj_3R_329()) return true;
        return false;
    }

    private boolean jj_3R_249() {
        if (jj_3R_328()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_322() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_362()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_99()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_363()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_364()) jj_scanpos = xsp;
        if (jj_3R_150()) return true;
        return false;
    }

    private boolean jj_3R_161() {
        if (jj_3R_214()) return true;
        return false;
    }

    private boolean jj_3R_248() {
        if (jj_3R_327()) return true;
        return false;
    }

    private boolean jj_3R_247() {
        if (jj_3R_326()) return true;
        return false;
    }

    private boolean jj_3R_239() {
        if (jj_3R_322()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_323()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_63() {
        if (jj_3R_162()) return true;
        return false;
    }

    private boolean jj_3R_164() {
        Token xsp;
        xsp = jj_scanpos;
        jj_lookingAhead = true;
        jj_semLA = isNextTokenAnAssert();
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_246()) {
            jj_scanpos = xsp;
            if (jj_3_63()) {
                jj_scanpos = xsp;
                if (jj_3R_247()) {
                    jj_scanpos = xsp;
                    if (jj_3R_248()) {
                        jj_scanpos = xsp;
                        if (jj_3R_249()) {
                            jj_scanpos = xsp;
                            if (jj_3R_250()) {
                                jj_scanpos = xsp;
                                if (jj_3R_251()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_252()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_253()) {
                                            jj_scanpos = xsp;
                                            if (jj_3R_254()) {
                                                jj_scanpos = xsp;
                                                if (jj_3R_255()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3R_256()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3R_257()) {
                                                            jj_scanpos = xsp;
                                                            if (jj_3R_258()) {
                                                                jj_scanpos = xsp;
                                                                if (jj_3R_259()) {
                                                                    jj_scanpos = xsp;
                                                                    if (jj_3R_260()) return true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_246() {
        if (jj_3R_289()) return true;
        return false;
    }

    private boolean jj_3_15() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_107()) return true;
        return false;
    }

    private boolean jj_3R_152() {
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_239()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_420() {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private boolean jj_3R_414() {
        Token xsp;
        if (jj_3R_420()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_420()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_286()) return true;
        return false;
    }

    private boolean jj_3_60() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_161()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_3R_118()) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private boolean jj_3R_321() {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private boolean jj_3_62() {
        Token xsp;
        if (jj_3_60()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_60()) {
                jj_scanpos = xsp;
                break;
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_61()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_403() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_62()) {
            jj_scanpos = xsp;
            if (jj_3R_414()) return true;
        }
        return false;
    }

    private boolean jj_3R_383() {
        if (jj_3R_214()) return true;
        return false;
    }

    private boolean jj_3R_199() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_3R_152()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_444()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_415() {
        if (jj_3R_193()) return true;
        return false;
    }

    private boolean jj_3R_427() {
        if (jj_3R_326()) return true;
        return false;
    }

    private boolean jj_3R_197() {
        if (jj_3R_194()) return true;
        return false;
    }

    private boolean jj_3R_101() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_197()) jj_scanpos = xsp;
        if (jj_3R_198()) return true;
        if (jj_3R_199()) return true;
        xsp = jj_scanpos;
        if (jj_3R_426()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_427()) {
            jj_scanpos = xsp;
            if (jj_scan_token(82)) return true;
        }
        return false;
    }

    private boolean jj_3R_418() {
        if (jj_3R_107()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_15()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_405() {
        if (jj_3R_149()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_415()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_404() {
        if (jj_3R_403()) return true;
        return false;
    }

    private boolean jj_3R_382() {
        if (jj_3R_112()) return true;
        return false;
    }

    private boolean jj_3R_286() {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_418()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(83)) jj_scanpos = xsp;
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private boolean jj_3R_385() {
        if (jj_3R_314()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_404()) {
            jj_scanpos = xsp;
            if (jj_3R_405()) return true;
        }
        return false;
    }

    private boolean jj_3R_384() {
        if (jj_3R_144()) return true;
        if (jj_3R_403()) return true;
        return false;
    }

    private boolean jj_3R_203() {
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3R_343() {
        if (jj_scan_token(ASSIGN)) return true;
        if (jj_3R_107()) return true;
        return false;
    }

    private boolean jj_3R_107() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_202()) {
            jj_scanpos = xsp;
            if (jj_3R_203()) return true;
        }
        return false;
    }

    private boolean jj_3R_202() {
        if (jj_3R_286()) return true;
        return false;
    }

    private boolean jj_3R_425() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_264()) return true;
        return false;
    }

    private boolean jj_3R_100() {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private boolean jj_3R_353() {
        if (jj_scan_token(NEW)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_382()) jj_scanpos = xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_383()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_384()) {
            jj_scanpos = xsp;
            if (jj_3R_385()) return true;
        }
        return false;
    }

    private boolean jj_3R_238() {
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_321()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_237() {
        if (jj_scan_token(THIS)) return true;
        return false;
    }

    private boolean jj_3_14() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(THIS)) return true;
        return false;
    }

    private boolean jj_3R_150() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_14()) {
            jj_scanpos = xsp;
            if (jj_3R_237()) {
                jj_scanpos = xsp;
                if (jj_3R_238()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_462() {
        if (jj_3R_193()) return true;
        return false;
    }

    private boolean jj_3R_407() {
        if (jj_3R_193()) return true;
        return false;
    }

    private boolean jj_3R_350() {
        if (jj_3R_375()) return true;
        return false;
    }

    private boolean jj_3R_283() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_282()) return true;
        return false;
    }

    private boolean jj_3R_264() {
        if (jj_3R_150()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_343()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_406() {
        if (jj_3R_112()) return true;
        return false;
    }

    private boolean jj_3R_98() {
        if (jj_3R_194()) return true;
        return false;
    }

    private boolean jj_3_9() {
        if (jj_3R_99()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_100()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_scan_token(83)) {
            jj_scanpos = xsp;
            if (jj_scan_token(86)) {
                jj_scanpos = xsp;
                if (jj_scan_token(82)) return true;
            }
        }
        return false;
    }

    private boolean jj_3_8() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_98()) jj_scanpos = xsp;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private boolean jj_3R_201() {
        if (jj_3R_99()) return true;
        if (jj_3R_264()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_425()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private boolean jj_3R_157() {
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(NEW)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_406()) jj_scanpos = xsp;
        if (jj_3R_215()) return true;
        if (jj_3R_314()) return true;
        if (jj_3R_149()) return true;
        xsp = jj_scanpos;
        if (jj_3R_407()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_461() {
        if (jj_3R_111()) return true;
        return false;
    }

    private boolean jj_3R_94() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3_11() {
        if (jj_3R_102()) return true;
        return false;
    }

    private boolean jj_3_10() {
        if (jj_3R_101()) return true;
        return false;
    }

    private boolean jj_3_12() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(49)) jj_scanpos = xsp;
        if (jj_scan_token(LBRACE)) return true;
        return false;
    }

    private boolean jj_3R_106() {
        if (jj_3R_201()) return true;
        return false;
    }

    private boolean jj_3R_105() {
        if (jj_3R_200()) return true;
        return false;
    }

    private boolean jj_3R_104() {
        if (jj_3R_174()) return true;
        return false;
    }

    private boolean jj_3R_355() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3R_402() {
        if (jj_3R_326()) return true;
        return false;
    }

    private boolean jj_3_7() {
        if (jj_3R_97()) return true;
        return false;
    }

    private boolean jj_3_13() {
        if (jj_3R_103()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_7()) {
            jj_scanpos = xsp;
            jj_lookingAhead = true;
            jj_semLA = isKeyword("enum");
            jj_lookingAhead = false;
            if (!jj_semLA || jj_3R_104()) {
                jj_scanpos = xsp;
                if (jj_3R_105()) {
                    jj_scanpos = xsp;
                    if (jj_3R_106()) {
                        jj_scanpos = xsp;
                        if (jj_3_10()) {
                            jj_scanpos = xsp;
                            if (jj_3_11()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_96() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_187()) {
            jj_scanpos = xsp;
            if (jj_3_13()) {
                jj_scanpos = xsp;
                if (jj_scan_token(82)) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_187() {
        if (jj_3R_278()) return true;
        return false;
    }

    private boolean jj_3_6() {
        if (jj_3R_96()) return true;
        return false;
    }

    private boolean jj_3_4() {
        if (jj_scan_token(COMMA)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_94()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_95()) return true;
        return false;
    }

    private boolean jj_3R_193() {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_6()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private boolean jj_3R_304() {
        if (jj_3R_118()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_355()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_401() {
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3R_375() {
        if (jj_scan_token(EXTENDS)) return true;
        if (jj_3R_145()) return true;
        return false;
    }

    private boolean jj_3R_149() {
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_304()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_282() {
        if (jj_3R_215()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_350()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_111() {
        if (jj_3R_149()) return true;
        return false;
    }

    private boolean jj_3R_394() {
        if (jj_scan_token(STRING_LITERAL)) return true;
        return false;
    }

    private boolean jj_3R_194() {
        if (jj_scan_token(LT)) return true;
        if (jj_3R_282()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_283()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private boolean jj_3R_395() {
        if (jj_scan_token(CHARACTER_LITERAL)) return true;
        return false;
    }

    private boolean jj_3R_95() {
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_461()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_462()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_5() {
        if (jj_3R_96()) return true;
        return false;
    }

    private boolean jj_3R_366() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3R_442() {
        if (jj_scan_token(SEMICOLON)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_5()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_453() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3R_400() {
        if (jj_3R_326()) return true;
        return false;
    }

    private boolean jj_3R_441() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_453()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_95()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_4()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_413() {
        if (jj_scan_token(HEX_FLOATING_POINT_LITERAL)) return true;
        return false;
    }

    private boolean jj_3R_412() {
        if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
        return false;
    }

    private boolean jj_3R_411() {
        if (jj_scan_token(INTEGER_LITERAL)) return true;
        return false;
    }

    private boolean jj_3R_274() {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_441()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(83)) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_442()) jj_scanpos = xsp;
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private boolean jj_3R_393() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_411()) {
            jj_scanpos = xsp;
            if (jj_3R_412()) {
                jj_scanpos = xsp;
                if (jj_3R_413()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_398() {
        if (jj_3R_326()) return true;
        return false;
    }

    private boolean jj_3R_159() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_150()) return true;
        return false;
    }

    private boolean jj_3R_273() {
        if (jj_3R_281()) return true;
        return false;
    }

    private boolean jj_3R_380() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    private boolean jj_3R_396() {
        if (jj_scan_token(TRUE)) return true;
        return false;
    }

    private boolean jj_3R_379() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_396()) {
            jj_scanpos = xsp;
            if (jj_scan_token(27)) return true;
        }
        return false;
    }

    private boolean jj_3R_399() {
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3R_378() {
        if (jj_3R_395()) return true;
        return false;
    }

    private boolean jj_3R_377() {
        if (jj_3R_394()) return true;
        return false;
    }

    private boolean jj_3R_376() {
        if (jj_3R_393()) return true;
        return false;
    }

    private boolean jj_3R_351() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_376()) {
            jj_scanpos = xsp;
            if (jj_3R_377()) {
                jj_scanpos = xsp;
                if (jj_3R_378()) {
                    jj_scanpos = xsp;
                    if (jj_3R_379()) {
                        jj_scanpos = xsp;
                        if (jj_3R_380()) return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_421() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_244()) return true;
        return false;
    }

    private boolean jj_3R_367() {
        if (jj_3R_99()) return true;
        return false;
    }

    private boolean jj_3R_189() {
        if (jj_scan_token(INTERFACE)) return true;
        return false;
    }

    private boolean jj_3R_325() {
        Token xsp;
        xsp = jj_scanpos;
        jj_lookingAhead = true;
        jj_semLA = jdkVersion >= 11 && isKeyword("var");
        jj_lookingAhead = false;
        if (!jj_semLA || jj_scan_token(73)) {
            jj_scanpos = xsp;
            if (jj_3R_367()) return true;
        }
        return false;
    }

    private boolean jj_3R_174() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_273()) jj_scanpos = xsp;
        if (jj_3R_274()) return true;
        return false;
    }

    private boolean jj_3R_397() {
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3R_391() {
        if (jj_scan_token(ELLIPSIS)) return true;
        return false;
    }

    private boolean jj_3R_440() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_438()) return true;
        return false;
    }

    private boolean jj_3R_365() {
        if (jj_scan_token(FINAL)) return true;
        return false;
    }

    private boolean jj_3R_324() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_365()) {
            jj_scanpos = xsp;
            if (jj_3R_366()) return true;
        }
        return false;
    }

    private boolean jj_3R_244() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_324()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_325()) return true;
        xsp = jj_scanpos;
        if (jj_3R_391()) jj_scanpos = xsp;
        if (jj_3R_150()) return true;
        return false;
    }

    private boolean jj_3R_281() {
        if (jj_scan_token(IMPLEMENTS)) return true;
        if (jj_3R_438()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_440()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_439() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_438()) return true;
        return false;
    }

    private boolean jj_3_59() {
        if (jj_3R_160()) return true;
        return false;
    }

    private boolean jj_3R_160() {
        if (jj_3R_244()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_421()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_280() {
        if (jj_scan_token(EXTENDS)) return true;
        if (jj_3R_438()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_439()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_158() {
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_59()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_192() {
        if (jj_3R_281()) return true;
        return false;
    }

    private boolean jj_3R_191() {
        if (jj_3R_280()) return true;
        return false;
    }

    private boolean jj_3R_190() {
        if (jj_3R_194()) return true;
        return false;
    }

    private boolean jj_3R_279() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(28)) {
            jj_scanpos = xsp;
            if (jj_scan_token(12)) return true;
        }
        return false;
    }

    private boolean jj_3_58() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_150()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_159()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RPAREN)) return true;
        if (jj_scan_token(LAMBDA)) return true;
        xsp = jj_scanpos;
        if (jj_3R_401()) {
            jj_scanpos = xsp;
            if (jj_3R_402()) return true;
        }
        return false;
    }

    private boolean jj_3R_188() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_279()) jj_scanpos = xsp;
        if (jj_scan_token(CLASS)) return true;
        return false;
    }

    private boolean jj_3_57() {
        if (jj_3R_158()) return true;
        if (jj_scan_token(LAMBDA)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_399()) {
            jj_scanpos = xsp;
            if (jj_3R_400()) return true;
        }
        return false;
    }

    private boolean jj_3R_381() {
        if (jj_3R_150()) return true;
        if (jj_scan_token(LAMBDA)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_397()) {
            jj_scanpos = xsp;
            if (jj_3R_398()) return true;
        }
        return false;
    }

    private boolean jj_3R_352() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_381()) {
            jj_scanpos = xsp;
            if (jj_3_57()) {
                jj_scanpos = xsp;
                if (jj_3_58()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_97() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_188()) {
            jj_scanpos = xsp;
            if (jj_3R_189()) return true;
        }
        if (jj_scan_token(IDENTIFIER)) return true;
        xsp = jj_scanpos;
        if (jj_3R_190()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_191()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_192()) jj_scanpos = xsp;
        if (jj_3R_193()) return true;
        return false;
    }

    private boolean jj_3R_151() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_150()) return true;
        return false;
    }

    private boolean jj_3R_155() {
        if (jj_3R_112()) return true;
        return false;
    }

    private boolean jj_3R_236() {
        if (jj_3R_320()) return true;
        return false;
    }

    private boolean jj_3_56() {
        if (jj_3R_157()) return true;
        return false;
    }

    private boolean jj_3_55() {
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(SUPER)) return true;
        return false;
    }

    private boolean jj_3_54() {
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(THIS)) return true;
        return false;
    }

    private boolean jj_3R_186() {
        if (jj_3R_102()) return true;
        return false;
    }

    private boolean jj_3R_235() {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_3R_118()) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private boolean jj_3R_234() {
        if (jj_3R_149()) return true;
        return false;
    }

    private boolean jj_3R_185() {
        if (jj_3R_174()) return true;
        return false;
    }

    private boolean jj_3R_148() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_233()) {
            jj_scanpos = xsp;
            if (jj_3R_234()) {
                jj_scanpos = xsp;
                if (jj_3R_235()) {
                    jj_scanpos = xsp;
                    if (jj_3_54()) {
                        jj_scanpos = xsp;
                        if (jj_3_55()) {
                            jj_scanpos = xsp;
                            if (jj_3_56()) {
                                jj_scanpos = xsp;
                                if (jj_3R_236()) return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_233() {
        if (jj_3R_319()) return true;
        return false;
    }

    private boolean jj_3R_184() {
        if (jj_3R_97()) return true;
        return false;
    }

    private boolean jj_3_53() {
        if (jj_3R_154()) return true;
        if (jj_scan_token(METHOD_REF)) return true;
        return false;
    }

    private boolean jj_3R_80() {
        if (jj_3R_103()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_184()) {
            jj_scanpos = xsp;
            jj_lookingAhead = true;
            jj_semLA = isKeyword("enum");
            jj_lookingAhead = false;
            if (!jj_semLA || jj_3R_185()) {
                jj_scanpos = xsp;
                if (jj_3R_186()) return true;
            }
        }
        return false;
    }

    private boolean jj_3_52() {
        if (jj_3R_156()) return true;
        if (jj_scan_token(METHOD_REF)) return true;
        return false;
    }

    private boolean jj_3R_303() {
        if (jj_3R_354()) return true;
        return false;
    }

    private boolean jj_3_51() {
        if (jj_3R_154()) return true;
        if (jj_scan_token(METHOD_REF)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_155()) jj_scanpos = xsp;
        if (jj_scan_token(NEW)) return true;
        return false;
    }

    private boolean jj_3R_302() {
        if (jj_3R_154()) return true;
        return false;
    }

    private boolean jj_3_50() {
        if (jj_3R_153()) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(CLASS)) return true;
        return false;
    }

    private boolean jj_3_49() {
        if (jj_3R_152()) return true;
        if (jj_scan_token(LAMBDA)) return true;
        return false;
    }

    private boolean jj_3_48() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_150()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_151()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RPAREN)) return true;
        if (jj_scan_token(LAMBDA)) return true;
        return false;
    }

    private boolean jj_3R_93() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3_47() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(LAMBDA)) return true;
        return false;
    }

    private boolean jj_3R_301() {
        if (jj_3R_354()) return true;
        return false;
    }

    private boolean jj_3R_92() {
        if (jj_scan_token(_DEFAULT)) return true;
        return false;
    }

    private boolean jj_3R_91() {
        if (jj_scan_token(STRICTFP)) return true;
        return false;
    }

    private boolean jj_3R_90() {
        if (jj_scan_token(VOLATILE)) return true;
        return false;
    }

    private boolean jj_3R_300() {
        if (jj_3R_154()) return true;
        return false;
    }

    private boolean jj_3R_89() {
        if (jj_scan_token(TRANSIENT)) return true;
        return false;
    }

    private boolean jj_3R_88() {
        if (jj_scan_token(NATIVE)) return true;
        return false;
    }

    private boolean jj_3R_299() {
        if (jj_3R_153()) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(CLASS)) return true;
        return false;
    }

    private boolean jj_3R_87() {
        if (jj_scan_token(SYNCHRONIZED)) return true;
        return false;
    }

    private boolean jj_3R_298() {
        if (jj_3R_353()) return true;
        return false;
    }

    private boolean jj_3R_297() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_118()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_86() {
        if (jj_scan_token(ABSTRACT)) return true;
        return false;
    }

    private boolean jj_3R_85() {
        if (jj_scan_token(FINAL)) return true;
        return false;
    }

    private boolean jj_3R_296() {
        if (jj_3R_352()) return true;
        return false;
    }

    private boolean jj_3R_84() {
        if (jj_scan_token(PRIVATE)) return true;
        return false;
    }

    private boolean jj_3R_295() {
        if (jj_3R_352()) return true;
        return false;
    }

    private boolean jj_3R_83() {
        if (jj_scan_token(PROTECTED)) return true;
        return false;
    }

    private boolean jj_3R_294() {
        if (jj_3R_352()) return true;
        return false;
    }

    private boolean jj_3R_82() {
        if (jj_scan_token(STATIC)) return true;
        return false;
    }

    private boolean jj_3R_293() {
        if (jj_scan_token(SUPER)) return true;
        return false;
    }

    private boolean jj_3R_292() {
        if (jj_scan_token(THIS)) return true;
        return false;
    }

    private boolean jj_3R_81() {
        if (jj_scan_token(PUBLIC)) return true;
        return false;
    }

    private boolean jj_3R_141() {
        if (jj_scan_token(REM)) return true;
        return false;
    }

    private boolean jj_3R_388() {
        if (jj_scan_token(DECR)) return true;
        return false;
    }

    private boolean jj_3R_291() {
        if (jj_3R_351()) return true;
        return false;
    }

    private boolean jj_3R_210() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_291()) {
            jj_scanpos = xsp;
            if (jj_3R_292()) {
                jj_scanpos = xsp;
                if (jj_3R_293()) {
                    jj_scanpos = xsp;
                    if (jj_3R_294()) {
                        jj_scanpos = xsp;
                        if (jj_3R_295()) {
                            jj_scanpos = xsp;
                            if (jj_3R_296()) {
                                jj_scanpos = xsp;
                                if (jj_3R_297()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_298()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_299()) {
                                            jj_scanpos = xsp;
                                            if (jj_3R_300()) {
                                                jj_scanpos = xsp;
                                                if (jj_3R_301()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3R_302()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3R_303()) return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_3() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_81()) {
            jj_scanpos = xsp;
            if (jj_3R_82()) {
                jj_scanpos = xsp;
                if (jj_3R_83()) {
                    jj_scanpos = xsp;
                    if (jj_3R_84()) {
                        jj_scanpos = xsp;
                        if (jj_3R_85()) {
                            jj_scanpos = xsp;
                            if (jj_3R_86()) {
                                jj_scanpos = xsp;
                                if (jj_3R_87()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_88()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_89()) {
                                            jj_scanpos = xsp;
                                            if (jj_3R_90()) {
                                                jj_scanpos = xsp;
                                                if (jj_3R_91()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3R_92()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3R_93()) return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_103() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_3()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_361() {
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_360() {
        if (jj_3R_112()) return true;
        return false;
    }

    private boolean jj_3R_319() {
        if (jj_scan_token(METHOD_REF)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_360()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(41)) {
            jj_scanpos = xsp;
            if (jj_scan_token(73)) return true;
        }
        return false;
    }

    private boolean jj_3_44() {
        if (jj_3R_148()) return true;
        return false;
    }

    private boolean jj_3_46() {
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_3R_149()) return true;
        return false;
    }

    private boolean jj_3R_320() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_45()) {
            jj_scanpos = xsp;
            if (jj_3_46()) {
                jj_scanpos = xsp;
                if (jj_3R_361()) return true;
            }
        }
        return false;
    }

    private boolean jj_3_45() {
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_112()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_3R_149()) return true;
        return false;
    }

    private boolean jj_3R_79() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3_1() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_79()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(PACKAGE)) return true;
        return false;
    }

    private boolean jj_3R_137() {
        if (jj_scan_token(MINUS)) return true;
        return false;
    }

    private boolean jj_3R_140() {
        if (jj_scan_token(SLASH)) return true;
        return false;
    }

    private boolean jj_3R_110() {
        if (jj_3R_210()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_44()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_387() {
        if (jj_scan_token(INCR)) return true;
        return false;
    }

    private boolean jj_3R_359() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_387()) {
            jj_scanpos = xsp;
            if (jj_3R_388()) return true;
        }
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_80()) return true;
        return false;
    }

    private boolean jj_3R_316() {
        if (jj_scan_token(BANG)) return true;
        return false;
    }

    private boolean jj_3_88() {
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_358() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_145()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_146()) return true;
        return false;
    }

    private boolean jj_3_43() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_147()) return true;
        if (jj_3R_144()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_143() {
        if (jj_3R_183()) return true;
        return false;
    }

    private boolean jj_3R_357() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_226()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_142()) return true;
        return false;
    }

    private boolean jj_3R_317() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_357()) {
            jj_scanpos = xsp;
            if (jj_3R_358()) return true;
        }
        return false;
    }

    private boolean jj_3R_243() {
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_88()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_42() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_145()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_146()) return true;
        return false;
    }

    private boolean jj_3_41() {
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_143()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_144()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_318() {
        if (jj_3R_110()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_359()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_311() {
        if (jj_scan_token(MINUS)) return true;
        return false;
    }

    private boolean jj_3R_136() {
        if (jj_scan_token(PLUS)) return true;
        return false;
    }

    private boolean jj_3R_139() {
        if (jj_scan_token(STAR)) return true;
        return false;
    }

    private boolean jj_3R_231() {
        if (jj_3R_318()) return true;
        return false;
    }

    private boolean jj_3R_230() {
        if (jj_3R_317()) return true;
        return false;
    }

    private boolean jj_3R_125() {
        if (jj_scan_token(NE)) return true;
        return false;
    }

    private boolean jj_3R_229() {
        if (jj_3R_317()) return true;
        return false;
    }

    private boolean jj_3R_354() {
        if (jj_3R_243()) return true;
        return false;
    }

    private boolean jj_3R_315() {
        if (jj_scan_token(TILDE)) return true;
        return false;
    }

    private boolean jj_3R_146() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_228()) {
            jj_scanpos = xsp;
            if (jj_3R_229()) {
                jj_scanpos = xsp;
                if (jj_3R_230()) {
                    jj_scanpos = xsp;
                    if (jj_3R_231()) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_228() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_315()) {
            jj_scanpos = xsp;
            if (jj_3R_316()) return true;
        }
        if (jj_3R_142()) return true;
        return false;
    }

    private boolean jj_3R_156() {
        if (jj_3R_243()) return true;
        return false;
    }

    private boolean jj_3_39() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_136()) {
            jj_scanpos = xsp;
            if (jj_3R_137()) return true;
        }
        if (jj_3R_138()) return true;
        return false;
    }

    private boolean jj_3R_313() {
        if (jj_scan_token(DECR)) return true;
        if (jj_3R_110()) return true;
        return false;
    }

    private boolean jj_3_40() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_139()) {
            jj_scanpos = xsp;
            if (jj_3R_140()) {
                jj_scanpos = xsp;
                if (jj_3R_141()) return true;
            }
        }
        if (jj_3R_142()) return true;
        return false;
    }

    private boolean jj_3R_182() {
        return false;
    }

    private boolean jj_3R_181() {
        return false;
    }

    private boolean jj_3R_180() {
        return false;
    }

    private boolean jj_3R_312() {
        if (jj_scan_token(INCR)) return true;
        if (jj_3R_110()) return true;
        return false;
    }

    private boolean jj_3R_179() {
        return false;
    }

    private boolean jj_3R_225() {
        if (jj_3R_146()) return true;
        return false;
    }

    private boolean jj_3R_178() {
        return false;
    }

    private boolean jj_3R_224() {
        if (jj_3R_313()) return true;
        return false;
    }

    private boolean jj_3R_177() {
        if (jj_scan_token(STATIC)) return true;
        return false;
    }

    private boolean jj_3R_223() {
        if (jj_3R_312()) return true;
        return false;
    }

    private boolean jj_3_82() {
        Token xsp;
        xsp = jj_scanpos;
        jj_lookingAhead = true;
        jj_semLA = isKeyword("transitive");
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_176()) {
            jj_scanpos = xsp;
            if (jj_3R_177()) return true;
        }
        return false;
    }

    private boolean jj_3R_176() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_310() {
        if (jj_scan_token(PLUS)) return true;
        return false;
    }

    private boolean jj_3R_142() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_222()) {
            jj_scanpos = xsp;
            if (jj_3R_223()) {
                jj_scanpos = xsp;
                if (jj_3R_224()) {
                    jj_scanpos = xsp;
                    if (jj_3R_225()) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_222() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_310()) {
            jj_scanpos = xsp;
            if (jj_3R_311()) return true;
        }
        if (jj_3R_142()) return true;
        return false;
    }

    private boolean jj_3_87() {
        jj_lookingAhead = true;
        jj_semLA = isKeyword("provides");
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_182()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3_86() {
        jj_lookingAhead = true;
        jj_semLA = isKeyword("uses");
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_181()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3_85() {
        jj_lookingAhead = true;
        jj_semLA = isKeyword("opens");
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_180()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3_84() {
        jj_lookingAhead = true;
        jj_semLA = isKeyword("exports");
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_179()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_471() {
        if (jj_3R_472()) return true;
        return false;
    }

    private boolean jj_3R_124() {
        if (jj_scan_token(EQ)) return true;
        return false;
    }

    private boolean jj_3R_138() {
        if (jj_3R_142()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_40()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_83() {
        jj_lookingAhead = true;
        jj_semLA = isKeyword("requires");
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_178()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_175() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_83()) {
            jj_scanpos = xsp;
            if (jj_3_84()) {
                jj_scanpos = xsp;
                if (jj_3_85()) {
                    jj_scanpos = xsp;
                    if (jj_3_86()) {
                        jj_scanpos = xsp;
                        if (jj_3_87()) return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_81() {
        if (jj_3R_175()) return true;
        return false;
    }

    private boolean jj_3R_133() {
        if (jj_3R_138()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_39()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_38() {
        if (jj_3R_135()) return true;
        return false;
    }

    private boolean jj_3_37() {
        if (jj_3R_134()) return true;
        return false;
    }

    private boolean jj_3_34() {
        if (jj_scan_token(INSTANCEOF)) return true;
        if (jj_3R_99()) return true;
        return false;
    }

    private boolean jj_3R_132() {
        if (jj_scan_token(LSHIFT)) return true;
        return false;
    }

    private boolean jj_3_36() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_132()) {
            jj_scanpos = xsp;
            if (jj_3_37()) {
                jj_scanpos = xsp;
                if (jj_3_38()) return true;
            }
        }
        if (jj_3R_133()) return true;
        return false;
    }

    private boolean jj_3_33() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_124()) {
            jj_scanpos = xsp;
            if (jj_3R_125()) return true;
        }
        if (jj_3R_126()) return true;
        return false;
    }

    private boolean jj_3R_131() {
        if (jj_3R_133()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_36()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_130() {
        if (jj_scan_token(GE)) return true;
        return false;
    }

    private boolean jj_3R_129() {
        if (jj_scan_token(LE)) return true;
        return false;
    }

    private boolean jj_3R_128() {
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private boolean jj_3R_472() {
        if (jj_scan_token(_DEFAULT)) return true;
        if (jj_3R_173()) return true;
        return false;
    }

    private boolean jj_3R_127() {
        if (jj_scan_token(LT)) return true;
        return false;
    }

    private boolean jj_3_32() {
        if (jj_scan_token(BIT_AND)) return true;
        if (jj_3R_123()) return true;
        return false;
    }

    private boolean jj_3_35() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_127()) {
            jj_scanpos = xsp;
            if (jj_3R_128()) {
                jj_scanpos = xsp;
                if (jj_3R_129()) {
                    jj_scanpos = xsp;
                    if (jj_3R_130()) return true;
                }
            }
        }
        if (jj_3R_131()) return true;
        return false;
    }

    private boolean jj_3R_219() {
        if (jj_3R_131()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_35()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /** Generated Token Manager. */
    public JavaParserTokenManager token_source;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    /** Whether we are looking ahead. */
    private boolean jj_lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1 = new int[171];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;


    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
    }


    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10401000, 0x10081000, 0x0, 0x10001000, 0x10001000, 0x10081000, 0x0, 0x4000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4904a000, 0x4904a000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5104a000, 0x10000000, 0x10000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4904a000, 0x0, 0x0, 0x0, 0x0, 0x4104a000, 0x0, 0x0, 0x4104a000, 0x0, 0x0, 0x0, 0x0, 0x4104a000, 0x0, 0x4104a000, 0x4000000, 0x4000000, 0x4000000, 0x4104a000, 0x4104a000, 0x4104a000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4904a000, 0x0, 0x0, 0x4904a000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x4904a000, 0x4904a000, 0x0, 0x4904a000, 0x0, 0x0, 0x10000000, 0x10000000, 0x0, 0x4104a000, 0x8000000, 0x8000000, 0x0, 0x0, 0x4904a000, 0x0, 0x0, 0x0, 0x4104a000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4104a000, 0x0, 0x0, 0x0, 0xc9a4e000, 0x0, 0x10000000, 0x10000000, 0x0, 0x4104a000, 0x0, 0x4904a000, 0x410000, 0x410000, 0x2000000, 0x4904a000, 0x4904a000, 0x4904a000, 0x0, 0x0, 0x0, 0x4904a000, 0x0, 0x20000, 0x20000000, 0x10000000, 0x10000000, 0x4904a000, 0x0, 0x0, 0x0, 0x0, 0x4904a000, 0x0, 0x4904a000, 0x514cb000, 0x10081000, 0x4104a000, 0x514cb000, 0x400000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[] {0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000, 0x0, 0x51127100, 0x40, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x4, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200000, 0x8a2506a0, 0x8a2506a0, 0x0, 0x0, 0x800000, 0x0, 0x0, 0x0, 0x100a0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x800000, 0x0, 0x8a2506a0, 0x20000, 0x0, 0x0, 0x0, 0x100a0, 0x0, 0x0, 0x100a0, 0x0, 0x0, 0x0, 0x0, 0x100a0, 0x0, 0x100a0, 0x40000, 0x40000, 0x40000, 0x100a0, 0x80100a0, 0x80100a0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a2506a0, 0x0, 0x0, 0x8a2506a0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200, 0x82240400, 0x200, 0x0, 0x0, 0x0, 0x8a2506a0, 0x8a2506a0, 0x0, 0x8a2506a0, 0x200000, 0x0, 0x0, 0x0, 0x0, 0x100a0, 0x2000000, 0x82000400, 0x80000000, 0x0, 0x8a2506a0, 0x0, 0x0, 0x0, 0x100a0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x100a0, 0x0, 0x0, 0x0, 0xae7d86a2, 0x0, 0x0, 0x0, 0x0, 0x100a0, 0x0, 0x8a2506a0, 0x0, 0x0, 0x0, 0x8a2506a0, 0x8a2506a0, 0x8a2506a0, 0x0, 0x0, 0x0, 0x8a2506a0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a2506a0, 0x0, 0x0, 0x0, 0x0, 0x8a2506a0, 0x0, 0x8a2506a0, 0x511371e0, 0x40, 0x100a0, 0x511371e0, 0x0, 0x0, 0x0, 0x20000, 0x0, 0x0, 0x0, 0x0,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[] {0x40000, 0x0, 0x40000, 0x40000, 0x40000, 0x0, 0x0, 0x200000, 0x0, 0x100000, 0x200000, 0x0, 0x200000, 0x0, 0x0, 0x0, 0x800000, 0x0, 0x0, 0x80000, 0x80000, 0x0, 0x200000, 0x200000, 0x200200, 0x80000, 0x40000, 0x1000, 0x4000, 0x80000, 0x0, 0x40000, 0x80000, 0x400000, 0x10000, 0x200, 0x30053b0, 0x30053b0, 0x80000, 0x800000, 0x0, 0x44000, 0x10000, 0x80000, 0x200200, 0x200000, 0x200000, 0x0, 0x0, 0x800000, 0x0, 0x800000, 0x8013b0, 0x0, 0x0, 0x200000, 0x200000, 0x0, 0x210000, 0x200000, 0x200, 0x800000, 0x200000, 0x80000, 0x800000, 0x4000200, 0x200000, 0x4000200, 0x0, 0x0, 0x0, 0x0, 0x200200, 0x200, 0x200000, 0x80000, 0x200000, 0x400000, 0x90000000, 0x60800000, 0x0, 0x0, 0x0, 0x0, 0x30013b0, 0x3000000, 0x3000000, 0x13b0, 0x0, 0x0, 0x1000, 0x100000, 0x800000, 0x200, 0x1b0, 0x1000, 0x200, 0x11000, 0x100000, 0x30053b0, 0x30053b0, 0x80000, 0x30053b0, 0x200, 0x80000, 0x200000, 0x200000, 0x0, 0x200, 0x0, 0x1b0, 0x30, 0x80000, 0x30013b0, 0x200000, 0x4000, 0x211000, 0x200, 0x800000, 0x4000, 0x800000, 0x200000, 0x4000, 0x211000, 0x200, 0x200000, 0x10000, 0x10000, 0x453b0, 0x200000, 0x200000, 0x200000, 0x80000, 0x200, 0x400000, 0x13b0, 0x0, 0x0, 0x0, 0x30013b0, 0x13b0, 0x13b0, 0x80000, 0x200, 0x200, 0x30013b0, 0x1000, 0x0, 0x0, 0x200000, 0x200000, 0x13b0, 0x8000000, 0x200000, 0x200, 0x80000, 0x32053b0, 0x80000, 0x32053b0, 0x240200, 0x0, 0x200200, 0x240200, 0x0, 0x200000, 0x100000, 0x0, 0x80000, 0x80000, 0x80000, 0x100000,};
    }

    private static void jj_la1_init_3() {
        jj_la1_3 = new int[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x40000000, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200, 0x1000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffe000, 0x0, 0x20000000, 0x1000, 0x30, 0x8c0, 0x30, 0x3c, 0x0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000000, 0x0, 0x3c, 0x3c, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x1000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffe000, 0xc, 0x0, 0x0, 0x0, 0x3c, 0xc, 0xc, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[88];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with user supplied CharStream. */
    public JavaParser(CharStream stream) {
        token_source = new JavaParserTokenManager(stream);
        token = new Token();
        token.next = jj_nt = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 171; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(CharStream stream) {
        token_source.ReInit(stream);
        token = new Token();
        token.next = jj_nt = token_source.getNextToken();
        jj_lookingAhead = false;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 171; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public JavaParser(JavaParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        token.next = jj_nt = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 171; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(JavaParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        token.next = jj_nt = token_source.getNextToken();
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 171; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken = token;
        if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
        else jj_nt = jj_nt.next = token_source.getNextToken();
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        jj_nt = token;
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error {}

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }


    /** Get the next Token. */
    final public Token getNextToken() {
        if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
        else jj_nt = jj_nt.next = token_source.getNextToken();
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = jj_lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[128];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 171; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0) {
                        la1tokens[96 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 128; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 88; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                        case 1:
                            jj_3_2();
                            break;
                        case 2:
                            jj_3_3();
                            break;
                        case 3:
                            jj_3_4();
                            break;
                        case 4:
                            jj_3_5();
                            break;
                        case 5:
                            jj_3_6();
                            break;
                        case 6:
                            jj_3_7();
                            break;
                        case 7:
                            jj_3_8();
                            break;
                        case 8:
                            jj_3_9();
                            break;
                        case 9:
                            jj_3_10();
                            break;
                        case 10:
                            jj_3_11();
                            break;
                        case 11:
                            jj_3_12();
                            break;
                        case 12:
                            jj_3_13();
                            break;
                        case 13:
                            jj_3_14();
                            break;
                        case 14:
                            jj_3_15();
                            break;
                        case 15:
                            jj_3_16();
                            break;
                        case 16:
                            jj_3_17();
                            break;
                        case 17:
                            jj_3_18();
                            break;
                        case 18:
                            jj_3_19();
                            break;
                        case 19:
                            jj_3_20();
                            break;
                        case 20:
                            jj_3_21();
                            break;
                        case 21:
                            jj_3_22();
                            break;
                        case 22:
                            jj_3_23();
                            break;
                        case 23:
                            jj_3_24();
                            break;
                        case 24:
                            jj_3_25();
                            break;
                        case 25:
                            jj_3_26();
                            break;
                        case 26:
                            jj_3_27();
                            break;
                        case 27:
                            jj_3_28();
                            break;
                        case 28:
                            jj_3_29();
                            break;
                        case 29:
                            jj_3_30();
                            break;
                        case 30:
                            jj_3_31();
                            break;
                        case 31:
                            jj_3_32();
                            break;
                        case 32:
                            jj_3_33();
                            break;
                        case 33:
                            jj_3_34();
                            break;
                        case 34:
                            jj_3_35();
                            break;
                        case 35:
                            jj_3_36();
                            break;
                        case 36:
                            jj_3_37();
                            break;
                        case 37:
                            jj_3_38();
                            break;
                        case 38:
                            jj_3_39();
                            break;
                        case 39:
                            jj_3_40();
                            break;
                        case 40:
                            jj_3_41();
                            break;
                        case 41:
                            jj_3_42();
                            break;
                        case 42:
                            jj_3_43();
                            break;
                        case 43:
                            jj_3_44();
                            break;
                        case 44:
                            jj_3_45();
                            break;
                        case 45:
                            jj_3_46();
                            break;
                        case 46:
                            jj_3_47();
                            break;
                        case 47:
                            jj_3_48();
                            break;
                        case 48:
                            jj_3_49();
                            break;
                        case 49:
                            jj_3_50();
                            break;
                        case 50:
                            jj_3_51();
                            break;
                        case 51:
                            jj_3_52();
                            break;
                        case 52:
                            jj_3_53();
                            break;
                        case 53:
                            jj_3_54();
                            break;
                        case 54:
                            jj_3_55();
                            break;
                        case 55:
                            jj_3_56();
                            break;
                        case 56:
                            jj_3_57();
                            break;
                        case 57:
                            jj_3_58();
                            break;
                        case 58:
                            jj_3_59();
                            break;
                        case 59:
                            jj_3_60();
                            break;
                        case 60:
                            jj_3_61();
                            break;
                        case 61:
                            jj_3_62();
                            break;
                        case 62:
                            jj_3_63();
                            break;
                        case 63:
                            jj_3_64();
                            break;
                        case 64:
                            jj_3_65();
                            break;
                        case 65:
                            jj_3_66();
                            break;
                        case 66:
                            jj_3_67();
                            break;
                        case 67:
                            jj_3_68();
                            break;
                        case 68:
                            jj_3_69();
                            break;
                        case 69:
                            jj_3_70();
                            break;
                        case 70:
                            jj_3_71();
                            break;
                        case 71:
                            jj_3_72();
                            break;
                        case 72:
                            jj_3_73();
                            break;
                        case 73:
                            jj_3_74();
                            break;
                        case 74:
                            jj_3_75();
                            break;
                        case 75:
                            jj_3_76();
                            break;
                        case 76:
                            jj_3_77();
                            break;
                        case 77:
                            jj_3_78();
                            break;
                        case 78:
                            jj_3_79();
                            break;
                        case 79:
                            jj_3_80();
                            break;
                        case 80:
                            jj_3_81();
                            break;
                        case 81:
                            jj_3_82();
                            break;
                        case 82:
                            jj_3_83();
                            break;
                        case 83:
                            jj_3_84();
                            break;
                        case 84:
                            jj_3_85();
                            break;
                        case 85:
                            jj_3_86();
                            break;
                        case 86:
                            jj_3_87();
                            break;
                        case 87:
                            jj_3_88();
                            break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {

        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}

/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */

/*
 * This file is to test the JavaCC java grammer, whether we can parse specific java constructs without
 * throwing a syntax error.
 */

class Superclass {

    public Superclass() {
    }

    public <V> Superclass(Class<V> clazz) {
    }

    <T> T doStuff(T s) {
        return s;
    }
}

class Outer {

    Outer() {
        System.out.println("Outer constructor");
    }

    class Inner {

        Inner() {
            System.out.println("Inner constructor");
        }
    }
}

class Child extends Outer.Inner {

    Child(Outer o) {
        o.super();
        System.out.println("Child constructor");
    }
}

public class ParserCornerCases extends Superclass {

    public ParserCornerCases() {
        super();
    }

    public ParserCornerCases(int a) {
        <Integer>this(a, 2);
    }

    public <W> ParserCornerCases(int a, int b) {
        <String>super(String.class);
    }

    public ParserCornerCases(String title) {
        this();
    }

    public strictfp void testGeneric() {
        String o = super.<String>doStuff("foo");
        String v = this.<String>thisGeneric("bar");
    }

    <X> X thisGeneric(X x) {
        return x;
    }

    Class getByteArrayClass() {
        return (byte[].class);
    }

    public void bitwiseOperator() {
        if ((modifiers & InputEvent.SHIFT_DOWN_MASK) != 0) {
            buf.append("shift ");
        }
    }
}

/**
 * Test case from http://jira.codehaus.org/browse/MPMD-126
 */
class PmdTestParent {

    public PmdTestParent(Object obj) {}
}

class PmdTestChild extends PmdTestParent {

    public PmdTestChild() {
        // the following line produced a parsing problem
        super(new Object() {

            public Object create() {

                Object memoryMonitor = null;

                if (memoryMonitor == null) {
                    memoryMonitor = new Object();
                }

                return memoryMonitor;
            }
        });
    }
}

/*
 * Test cases for bug #1020 Parsing Error
 */
class SimpleBean {

    String name;
}

class SimpleBeanUser {

    SimpleBeanUser(SimpleBean o) {

    }

    SimpleBeanUser() {
        this(new SimpleBean() {{
            name = "test";
        }});
    }
}

class SimpleBeanUser2 extends SimpleBeanUser {

    SimpleBeanUser2() {
        super(new SimpleBean() {{
            name = "test2";
        }});
    }
}

/*
 * Test case for bug #1007 Parse Exception with annotation
 */
class TestParseAnnototation {

    void parse() {
        for (@SuppressWarnings("unchecked") int i = 0; i < 10; i++) {
        }
        for (@SuppressWarnings("unchecked") Iterator it = Fachabteilung.values().iterator(); it.hasNext(); ) {
        }
        List<String> l = new ArrayList<String>();
        for (@SuppressWarnings("unchecked") String s : l) {
        }
    }
}

/*
 * Test case for bug #956 PMD Parse Exception
 */
class FooBlock {}

class MyFoo {

    MyFoo(FooBlock b) {
    }
}

class Foo extends MyFoo {

    public Foo() {
        super(new FooBlock() {
            public Object valueOf(Object object) {
                String fish = "salmon";
                return fish;
            }
        });
    }
}

/*
 * Verifies #1122 parse error at class.super
 */
class SuperTest {

    /**
     * @throws UnsupportedOperationException
     */
    public Iterator<E> iterator() {
        if (this.mods.contains(Modification.Iterator)) {
            return new Iterator<E>() {
                Iterator<E> wrapped = ImmutableSet.super.iterator();

                public boolean hasNext() {
                    return this.wrapped.hasNext();
                }

                public E next() {
                    return this.wrapped.next();
                }

                public void remove() {
                    if (ImmutableSet.this.mods.contains(Modification.RemoveIter)) {
                        this.wrapped.remove();
                    }
                    throw new UnsupportedOperationException();
                }
            };
        }
        throw new UnsupportedOperationException();
    }
}

/*
 * Test case for #1310 PMD cannot parse int.class
 */
class ClazzPropertyOfPrimitiveTypes {

    public void test() {
        Class<?> c = int.class;
        c = short.class;
        c = long.class;
        c = float.class;
        c = double.class;
        c = char.class;
        c = byte.class;
        c = void.class;

        if (c == int.class || c == short.class || c == long.class || c == double.class || c == char.class
            || c == byte.class || c == void.class) {

        }

        if ("a".equals((int.class).getName())) {

        }

        if ((Integer.class.equals(clazz)) || (int.class.equals(clazz))) {
        }
    }
}

/**
 * Java 8 language syntax
 *
 * @see <a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html">State of the Lambda</a>
 * @see <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html">java.util.function</a>
 */
public class ParserCornerCases18 {

    public void lambdas() {
        FileFilter java = (File f) -> f.getName().endsWith(".java");
        FileFilter java2 = f -> f.getName().endsWith(".java");
        FileFilter java3 = (f) -> f.getName().endsWith(".java");
        FileFilter java4 = (f -> f.getName().endsWith(".java"));
        IntStream.range(0, array.length).parallel().forEach(i -> { array[i] = generator.apply(i); });


        FileFilter[] filters = new FileFilter[] {
            f -> f.exists(), f -> f.canRead(), f -> f.getName().startsWith("q")
        };
        filterFiles(new FileFilter[] {
            f -> f.exists(), f -> f.canRead(), f -> f.getName().startsWith("q")
        });

        String user = doPrivileged(() -> System.getProperty("user.name"));

        Callable<String> c = () -> "done";
        Runnable r = () -> { System.out.println("done"); };
        Supplier<Runnable> sup = () -> () -> { System.out.println("hi"); };
        boolean flag = 1 > 2;
        Callable<Integer> c2 = flag ? (() -> 23) : (() -> 42);
        Object o = (Runnable) () -> { System.out.println("hi"); };
        new ParserCornerCases18().r1.run();

        Comparator<String> comparer = (s1, s2) -> s1.compareToIgnoreCase(s2);
        comparer = (s1, s2) -> s1.compareToIgnoreCase(s2);

        Button button = new Button();
        button.addActionListener(e -> System.out.println(e.getModifiers()));

        // grammar/parser: don't get confused with this...
        int initialSizeGlobal = (int) (profilingContext.m_profileItems.size() * (150.0 * 0.30));

        BiConsumer<String, Integer> lambda2 = (String s, Integer i) -> { i++; };
        BiConsumer<String, Integer> lambda2a = (s, i) -> { i++; };
        TriConsumer<String, Integer, Double> lambda3 = (String s, Integer i, Double d) -> { d += i; };
        TriConsumer<String, Integer, Double> lambda3a = (s, i, d) -> { d += i; };
    }

    @FunctionalInterface
    public interface TriConsumer<A, B, C> {

        void accept(A a, B b, C c);
    }

    Runnable r1 = () -> { System.out.println(this); };

    public Runnable toDoLater() {
        return () -> {
            System.out.println("later");
        };
    }

    private String doPrivileged(PrivilegedAction<String> action) {
        return action.run();
    }

    private void filterFiles(FileFilter[] filters) {
    }

    /* Example from java.util.Comparator. */
    public static <K extends Comparable<? super K>, V> Comparator<Map.Entry<K, V>> comparingByKey() {
        // intersection types in cast
        return (Comparator<Map.Entry<K, V>> & Serializable)
            (c1, c2) -> c1.getKey().compareTo(c2.getKey());
    }

    /* TODO: This construct can't be parsed. Either the cast expression is not detected, or the following Lambda Expression.
    /* Example from java.time.chrono.AbstractChronology */
    //    static final Comparator<ChronoLocalDateTime<? extends ChronoLocalDate>> DATE_TIME_ORDER =
    //            (Comparator<ChronoLocalDateTime<? extends ChronoLocalDate>> & Serializable) (dateTime1, dateTime2) -> {
    //                int cmp = Long.compare(dateTime1.toLocalDate().toEpochDay(), dateTime2.toLocalDate().toEpochDay());
    //                if (cmp == 0) {
    //                    cmp = Long.compare(dateTime1.toLocalTime().toNanoOfDay(), dateTime2.toLocalTime().toNanoOfDay());
    //                }
    //                return cmp;
    //            };

    public void methodReferences() {
        Runnable r = new ParserCornerCases18()::toDoLater;
        Runnable r1 = this::toDoLater;
        ParserCornerCases18 pc = new ParserCornerCases18();
        Runnable r11 = pc::toDoLater;
        Supplier<String> s = super::toString;
        Runnable r2 = ParserCornerCases18::staticMethod;

        IntFunction<int[]> arrayMaker = int[]::new;
        int[] array = arrayMaker.apply(10);  // creates an int[10]
    }

    // https://sourceforge.net/p/pmd/bugs/1173/
    public static class PmdMethodReferenceTest {

        Function<Integer, Integer> theFunction;

        public PmdTest() {
            theFunction = this::foo;
        }

        private int foo(int i) {
            return i;
        }
    }

    public static Runnable staticMethod() {
        return () -> System.out.println("run");
    }

    public void typeAnnotations() {
        String myString = (@NonNull String) str;
        Object o = new @Interned MyObject();
    }

    class UnmodifiableList<T> implements @Readonly List<@Readonly T> {}

    void monitorTemperature() throws @Critical TemperatureException {}

    // https://sourceforge.net/p/pmd/bugs/1205/
    public static class X {

        public void lambaWithIf() {
            Stream.of(1, 2, 3)
                  .sorted((a, b) -> {
                      int x = a.hashCode() - b.hashCode();
                      if (a.equals(new X()))
                          x = 1;
                      return x;
                  })
                  .count();
        }

        public void lambaWithIf2() {
            Stream.of(1, 2, 3)
                  .sorted((Integer a, Integer b) -> {
                      int x = a.hashCode() - b.hashCode();
                      if (a.equals(new X()))
                          x = 1;
                      return x;
                  })
                  .count();
        }

        // https://sourceforge.net/p/pmd/bugs/1258/
        public void lambdaWithPropertyAssignment() {
            object.event = () -> {
                Request request = new Request();
                request.id = 42;
                //                request.setId(42);
            };
        }
    }

    public List<@AnnotatedUsage ?> testWildCardWithAnnotation() {
        return null;
    }

    public Object @Nullable [] testAnnotationsToArrayElements() {
        return null;
    }

    private byte @Nullable [] getBytes() {
        return null;
    }

    public static <T extends @NonNull Enum<?>> T getEnum() {
        return null;
    }

    public static <T> @Nullable T getNullableEnum() {
        return null;
    }

    public Object[] createNonNullArray() {
        return new Object@NonNull[0];
    }

    private static void testMultiDimArrayWithAnnotations() {
        // ever used a 3D-Array in java??
        Object x = new Object@NonNull[2]@Nullable[1]@NonNull[3];
    }


    /**
     * Explicit receiver Parameters
     * see: http://blog.joda.org/2015/12/explicit-receiver-parameters.html
     * and: https://sourceforge.net/p/pmd/bugs/1455/
     */
    public void methodWithReceiverParameter(ParserCornerCases18 this) { }

    public void methodWithReceiverAndOtherParameters(ParserCornerCases18 this, String other) { }

    public void methodWithReceiverParameterWithAnnotation(@AnnotatedUsage ParserCornerCases18 this, String other) { }

    @Target(ElementType.TYPE_USE)
    public @interface AnnotatedUsage {}

    class Inner {

        Inner(ParserCornerCases18 ParserCornerCases18.this) {}
    }
}

interface DefaultIterator<E> {

    boolean hasNext();


    E next();


    void remove();


    default void skip(int i) {
        for (; i > 0 && hasNext(); i--) next();
    }


    static void staticInterfaceMethods() {
        System.out.println("");
    }
}

/*
 * This file is to test the JavaCC java grammer, whether we can parse specific java constructs without
 * throwing a syntax error.
 *
 * Java 7, see: http://docs.oracle.com/javase/7/docs/technotes/guides/language/enhancements.html#javase7
 */
public class ParserCornerCases17 {

    public ParserCornerCases17() {
        super();
    }

    public void binaryLiterals() {
        // An 8-bit 'byte' value:
        byte aByte = (byte) 0b00100001;

        // A 16-bit 'short' value:
        short aShort = (short) 0b1010000101000101;

        // Some 32-bit 'int' values:
        int anInt1 = 0b10100001010001011010000101000101;
        int anInt2 = 0b101;
        int anInt3 = 0B101; // The B can be upper or lower case.

        // A 64-bit 'long' value. Note the "L" suffix:
        long aLong = 0b1010000101000101101000010100010110100001010001011010000101000101L;

        int[] phases = {
            0b00110001,
            0b01100010,
            0b11000100,
            0b10001001,
            0b00010011,
            0b00100110,
            0b01001100,
            0b10011000
        };

        int instruction = 0;
        if ((instruction & 0b11100000) == 0b00000000) {
            final int register = instruction & 0b00001111;
            switch (instruction & 0b11110000) {
            case 0b00000000:
                break;
            case 0b00010000:
                break;
            case 0b00100000:
                break;
            case 0b00110000:
                break;
            case 0b01000000:
                break;
            case 0b01010000:
                break;
            case 0b01100000:
                break;
            case 0b01110000:
                break;
            default:
                throw new IllegalArgumentException();
            }
        }
    }

    public void underscoreInNumericLiterals() {
        long creditCardNumber = 1234_5678_9012_3456L;
        long socialSecurityNumber = 999_99_9999L;
        float pi = 3.14_15F;
        long hexBytes = 0xFF_EC_DE_5E;
        long hexWords = 0xCAFE_BABE;
        long maxLong = 0x7fff_ffff_ffff_ffffL;
        byte nybbles = 0b0010_0101;
        long bytes = 0b11010010_01101001_10010100_10010010;

        int _52 = 1;
        int x1 = _52;              // This is an identifier, not a numeric literal
        int x2 = 5_2;              // OK (decimal literal)
        int x4 = 5_______2;        // OK (decimal literal)
        int x7 = 0x5_2;            // OK (hexadecimal literal)
        int x9 = 0_52;             // OK (octal literal)
        int x10 = 05_2;            // OK (octal literal)
    }

    public String stringsInSwitchStatements() {
        String dayOfWeekArg = "Wednesday";
        String typeOfDay;
        switch (dayOfWeekArg) {
        case "Monday":
            typeOfDay = "Start of work week";
            break;
        case "Tuesday":
        case "Wednesday":
        case "Thursday":
            typeOfDay = "Midweek";
            break;
        case "Friday":
            typeOfDay = "End of work week";
            break;
        case "Saturday":
        case "Sunday":
            typeOfDay = "Weekend";
            break;
        default:
            throw new IllegalArgumentException("Invalid day of the week: " + dayOfWeekArg);
        }
        return typeOfDay;
    }

    class MyClass<X> {

        <T> MyClass(T t) {
        }
    }

    public void typeInferenceForGenericInstanceCreation() {
        Map<String, List<String>> myMap = new HashMap<>();

        List<String> list = new ArrayList<>();
        list.add("A");
        List<? extends String> list2 = new ArrayList<>();
        list.addAll(list2);

        MyClass<Integer> myObject = new MyClass<>("");
    }

    public void theTryWithResourcesStatement() throws IOException {
        String path = "/foo";
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            String first = br.readLine();
        }

        // Two resources declared
        String outputFileName = "/foo-out";
        String zipFileName = "/foo.zip";
        java.nio.charset.Charset charset = java.nio.charset.Charset.forName("US-ASCII");
        java.nio.file.Path outputFilePath = java.nio.file.Paths.get(outputFileName);

        // Open zip file and create output file with try-with-resources statement
        try (
            java.util.zip.ZipFile zf = new java.util.zip.ZipFile(zipFileName);
            java.io.BufferedWriter writer = java.nio.file.Files.newBufferedWriter(outputFilePath, charset)
        ) {

            // Enumerate each entry

            for (Enumeration<? extends ZipEntry> entries = zf.entries(); entries.hasMoreElements(); ) {

                // Get the entry name and write it to the output file

                String newLine = System.getProperty("line.separator");
                String zipEntryName = ((java.util.zip.ZipEntry) entries.nextElement()).getName() + newLine;
                writer.write(zipEntryName, 0, zipEntryName.length());
            }
        }
    }

    public void catchingMultipleExceptionTypes() throws IOException, SQLException {
        try {
            if (new File("foo").createNewFile()) {
                throw new SQLException();
            }

        } catch (IOException | SQLException ex) {
            ex.printStackTrace();
            throw ex;
        }
    }

    // With java 8 lambda grammar enhancement, this caused a problem, to not be identified as lambda...
    public void expressionInCastExpression() {
        // grammar/parser: don't get confused with this...
        int initialSizeGlobal = (int) (profilingContext.m_profileItems.size() * (150.0 * 0.30));
    }
}
